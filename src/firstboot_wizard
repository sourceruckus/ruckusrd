#!/bin/ash
#
# Copyright 2012-2024 Michael D Labriola <veggiemike@sourceruckus.org>
#
# Licensed under the GPLv3. See the file COPYING for details. 


CHROOT="chroot /sysroot /usr/bin/env -i HOME=/root TERM=$TERM PATH=$PATH"
DLG="whiptail --backtitle 'RuckusRD Firstboot'"
FIRSTBOOT_DONE_FILE=/.ruckusrd_firstboot_done


dlg_welcome()
{
    go=$DLG
    go="$go --title 'Welcome!'"
    go="$go --yesno 'Welcome to the RuckusRD Firstboot wizard, which will help you groom your sysroot prior to booting for the first time.\n\nContinue?'"
    go="$go 0 0"
    eval $go
}

dlg_hostname()
{
    go=$DLG
    go="$go --title 'System Hostname'"
    go="$go --inputbox \"What is the system's short hostname?\" 0 0"
    HOSTNAME=$(eval $go 3>&1 1>&2 2>&3)
}

dlg_pw()
{
    go=$DLG
    go="$go --title '$1 Password'"
    go="$go --passwordbox \"Please enter a $1 password\" 0 0"
    PW=$(eval $go 3>&1 1>&2 2>&3)
}

dlg_pw2()
{
    go=$DLG
    go="$go --title 'Reenter $1 Password'"
    go="$go --passwordbox \"Please reenter a $1 password\" 0 0"
    PW2=$(eval $go 3>&1 1>&2 2>&3)
}

dlg_pw_check()
{
    dlg_pw $1 || return $?
    dlg_pw2 $1 || return $?
    [ "$PW" = "$PW2" ] && [ -n "$PW" ]
}

dlg_pw_mismatch()
{
    go=$DLG
    go="$go --title 'Password Mismatch!'"
    go="$go --msgbox \"The entered passwords didn't match.  Try again.\" 0 0"
    eval $go
}

dlg_pw_loop()
{
    PW=
    PW2=
    while [ -z "$PW" ]; do
        dlg_pw_check $1
        res=$?
        if [ $res -eq 1 ]; then
            PW=
            dlg_pw_mismatch || return $?
        elif [ $res -ne 0 ]; then
            echo "cancelled"
            PW=
            return $res
        fi
    done
}

dlg_networking()
{
    go=$DLG
    go="$go --title 'Networking'"
    go="$go --menu \"Select a Networking template (you may have to modify after boot)\" 0 0 5"
    go="$go \"None\" \"System defaults, configure later\""
    go="$go \"Trunk\" \"Trunk w/ vlan20 DHCP interface (eno1)\""
    go="$go \"Xen VM Trunk\" \"Xen VM trunk w/ vlan20 DHCP interface (enX0)\""
    go="$go \"Xen Bridged Trunk\" \"Xen bridged trunk for domain0 w/ vlan20 DHCP interface (eno1)\""
    go="$go \"Bonded Trunk\" \"Bonded trunk w/ vlan20 DHCP interface (ens1f0, ens1f1)\""
    go="$go \"Xen Bridge on Bonded Trunk\" \"Xen bridge on bonded trunk w/ vlan20 DHCP interface (eno1, eno2)\""
    NETWORKING=$(eval $go 3>&1 1>&2 2>&3)
}

configure_networking()
{
    echo "Configuring for: $1..."
    case $1 in
        "Trunk")
            # trunk
            $CHROOT nmcli --offline connection add type ethernet con-name trunk \
                    ipv4.method disabled ipv6.method ignore > /sysroot/etc/NetworkManager/system-connections/trunk.nmconnection
            # vlan
            $CHROOT nmcli --offline connection add type vlan con-name vlan20 \
                    vlan.id 20 vlan.parent eno1 802-3-ethernet.cloned-mac-address stable \
                    ipv6.method ignore > /sysroot/etc/NetworkManager/system-connections/vlan20.nmconnection
            ;;
        "Xen VM Trunk")
            # trunk
            $CHROOT nmcli --offline connection add type ethernet con-name trunk \
                    ipv4.method disabled ipv6.method ignore > /sysroot/etc/NetworkManager/system-connections/trunk.nmconnection
            # vlan
            $CHROOT nmcli --offline connection add type vlan con-name vlan20 \
                    vlan.id 20 vlan.parent enX0 802-3-ethernet.cloned-mac-address stable \
                    ipv6.method ignore > /sysroot/etc/NetworkManager/system-connections/vlan20.nmconnection
            ;;
        "Xen Bridged Trunk")
            # xenbr0
            $CHROOT nmcli --offline connection add type ethernet con-name xenbr0 \
                    ipv4.method disabled ipv6.method ignore \
                    > /sysroot/etc/NetworkManager/system-connections/xenbr0.nmconnection
            # vlan
            $CHROOT nmcli --offline connection add type vlan con-name vlan20 \
                    vlan.id 20 vlan.parent xenbr0 802-3-ethernet.cloned-mac-address stable \
                    ipv6.method ignore > /sysroot/etc/NetworkManager/system-connections/vlan20.nmconnection
            ;;
        "Bonded Trunk")
            # slaves
            $CHROOT nmcli --offline connection add type bond-slave ifname ens1f0 master bond0 \
                    > /sysroot/etc/NetworkManager/system-connections/ens1f0.nmconnection
            $CHROOT nmcli --offline connection add type bond-slave ifname ens1f1 master bond0 \
                    > /sysroot/etc/NetworkManager/system-connections/ens1f1.nmconnection
            # bond0
            $CHROOT nmcli --offline connection add type bond con-name bond0 mode active-backup \
                    ipv4.method disabled ipv6.method ignore \
                    > /sysroot/etc/NetworkManager/system-connections/bond0.nmconnection
            # vlan
            $CHROOT nmcli --offline connection add type vlan con-name vlan20 \
                    vlan.id 20 vlan.parent bond0 802-3-ethernet.cloned-mac-address stable \
                    ipv6.method ignore > /sysroot/etc/NetworkManager/system-connections/vlan20.nmconnection
            ;;
        "Xen Bridge on Bonded Trunk")
            # slaves
            $CHROOT nmcli --offline connection add type bond-slave ifname eno1 master bond0 \
                    > /sysroot/etc/NetworkManager/system-connections/eno1.nmconnection
            $CHROOT nmcli --offline connection add type bond-slave ifname eno2 master bond0 \
                    > /sysroot/etc/NetworkManager/system-connections/eno1.nmconnection
            # bond0
            $CHROOT nmcli --offline connection add type bond con-name bond0 mode active-backup \
                    connection.master xenbr0 connection.slave-type bridge \
                    > /sysroot/etc/NetworkManager/system-connections/bond0.nmconnection
            # xenbr0
            $CHROOT nmcli --offline connection add type ethernet con-name xenbr0 \
                    ipv4.method disabled ipv6.method ignore \
                    > /sysroot/etc/NetworkManager/system-connections/xenbr0.nmconnection
            # vlan
            $CHROOT nmcli --offline connection add type vlan con-name vlan20 \
                    vlan.id 20 vlan.parent xenbr0 802-3-ethernet.cloned-mac-address stable \
                    ipv6.method ignore > /sysroot/etc/NetworkManager/system-connections/vlan20.nmconnection
            ;;
        None)
            # easy, nothing to do
            ;;
        *)
            # shouldn't get here
            return 1
    esac

    if [ "$1" != "None" ]; then
        chmod 600 /sysroot/etc/NetworkManager/system-connections/*.nmconnection
    fi
}

dlg_exit()
{
    go=$DLG
    go="$go --title 'Goodbye...'"
    go="$go --msgbox 'You have opted to exit partway through configuration... things might be a little messy.' 0 0"
    eval $go
}

dlg_done()
{
    go=$DLG
    go="$go --title 'Outstanding!'"
    go="$go --msgbox \"Finished! You can run this again by removing $FIRSTBOOT_DONE_FILE and adding 'firstboot' to your boot args.\" 0 0"
    eval $go
}

#firstboot_dryrun=y
firstboot_wizard()
{
    dlg_welcome || return
    # get hostname
    if ! dlg_hostname; then
        dlg_exit; return
    elif [ -z "$firstboot_dryrun" ] && [ "$(cat /sysroot/etc/hostname)" != "$HOSTNAME" ]; then
        # update if actually different
        echo $HOSTNAME > /sysroot/etc/hostname
        $CHROOT dbus-uuidgen > /sysroot/etc/machine-id
    fi
1    # get root pw
    if ! dlg_pw_loop root; then
        dlg_exit; return
    elif [ -z "$firstboot_dryrun" ]; then
        echo -e "$PW\n$PW2" | $CHROOT passwd root
    fi
    # get localadmin pw, then create that user
    if ! dlg_pw_loop localadmin; then
        dlg_exit; return
    elif [ -z "$firstboot_dryrun" ]; then
        $CHROOT useradd -c "Local Administrator" -G adm,sudo,cdrom,dip,plugdev -m -s /bin/zsh localadmin
        echo -e "$PW\n$PW2" | $CHROOT passwd localadmin
    fi
    # timezone
    if [ -z "$firstboot_dryrun" ]; then
        $CHROOT dpkg-reconfigure tzdata
    fi
    # locale
    if [ -z "$firstboot_dryrun" ]; then
        $CHROOT dpkg-reconfigure locales
    fi
    # networking
    if ! dlg_networking; then
        dlg_exit; return
    elif [ -z "$firstboot_dryrun" ]; then
        configure_networking $NETWORKING
    fi
    dlg_done
    if [ -z "$firstboot_dryrun" ]; then
        touch /sysroot/$FIRSTBOOT_DONE_FILE
    fi
}


firstboot_wizard
