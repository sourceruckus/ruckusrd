#!/bin/ash
#
# Copyright 2012-2025 Michael D Labriola <veggiemike@sourceruckus.org>
#
# Licensed under the GPLv3. See the file COPYING for details. 
#

. /ruckusrd-common.sh

CHROOT="chroot /sysroot /usr/bin/env -i HOME=/root TERM=$TERM PATH=$PATH"
DLG="whiptail --backtitle 'RuckusRD Firstboot'"
FIRSTBOOT_DONE_FILE=/.ruckusrd_firstboot_done


dlg_welcome()
{
    go=$DLG
    go="$go --title 'Welcome!'"
    go="$go --yesno 'Welcome to the RuckusRD Firstboot wizard, which will help you groom your sysroot prior to booting for the first time.\n\nContinue?'"
    go="$go 0 0"
    eval $go
}

dlg_hostname()
{
    go=$DLG
    go="$go --title 'System Hostname'"
    go="$go --inputbox \"What is the system's short hostname?\" 0 0"
    HOSTNAME=$(eval $go 3>&1 1>&2 2>&3)
}

dlg_pw()
{
    go=$DLG
    go="$go --title '$1 Password'"
    go="$go --passwordbox \"Please enter a $1 password\" 0 0"
    PW=$(eval $go 3>&1 1>&2 2>&3)
}

dlg_pw2()
{
    go=$DLG
    go="$go --title 'Reenter $1 Password'"
    go="$go --passwordbox \"Please reenter a $1 password\" 0 0"
    PW2=$(eval $go 3>&1 1>&2 2>&3)
}

dlg_pw_check()
{
    dlg_pw $1 || return 42
    dlg_pw2 $1 || return 42
    [ "$PW" = "$PW2" ] && [ -n "$PW" ]
}

dlg_pw_mismatch()
{
    go=$DLG
    go="$go --title 'Password Mismatch!'"
    go="$go --msgbox \"The entered passwords didn't match.  Try again.\" 0 0"
    eval $go
}

dlg_pw_loop()
{
    PW=
    PW2=
    while [ -z "$PW" ]; do
        dlg_pw_check $1
        res=$?
        if [ $res -eq 42 ]; then
            echo "cancelled"
            PW=
            return $res
        elif [ $res -ne 0 ]; then
            PW=
            dlg_pw_mismatch || return $?
        fi
    done
}

dlg_networking()
{
    # set a sane default device name, and dev2 name, to be used in this dialog
    # and also later on in configure_networking()
    dev=$(net_get_first_eth)
    [ -n "$dev" ] || dev=eth0
    dev_index=$(echo $dev | grep -o "[0-9]*$")
    dev2=$(echo $dev | sed "s|$dev_index$|$((dev_index+1))|")

    go=$DLG
    go="$go --title 'Networking'"
    go="$go --menu \"Select a Networking template (you may have to modify after boot)\" 0 0 5"
    go="$go \"None\" \"System defaults, configure later\""
    go="$go \"Trunk\" \"Trunk w/ vlan20 DHCP interface ($dev)\""
    go="$go \"Xen Bridged Trunk\" \"Xen bridged trunk for domain0 w/ vlan20 DHCP interface ($dev, xenbr0)\""
    go="$go \"Bonded Trunk\" \"Bonded trunk w/ vlan20 DHCP interface ($dev, $dev2, bond0)\""
    go="$go \"Xen Bridge on Bonded Trunk\" \"Xen bridge on bonded trunk w/ vlan20 DHCP interface ($dev, $dev2, bond0, xenbr0)\""
    NETWORKING=$(eval $go 3>&1 1>&2 2>&3)
}

configure_networking()
{
    echo "Configuring for: $1..."
    case $1 in
        "Trunk")
            # trunk
            $CHROOT nmcli --offline connection add type ethernet con-name trunk \
                    ipv4.method disabled ipv6.method disabled > /sysroot/etc/NetworkManager/system-connections/trunk.nmconnection
            # vlan
            $CHROOT nmcli --offline connection add type vlan con-name vlan20 \
                    vlan.id 20 vlan.parent $dev 802-3-ethernet.cloned-mac-address stable \
                    ipv6.method disabled > /sysroot/etc/NetworkManager/system-connections/vlan20.nmconnection
            ;;
        "Xen Bridged Trunk")
            # xenbr0
            $CHROOT nmcli --offline connection add type ethernet con-name xenbr0 \
                    connection.interface-name xenbr0 \
                    ipv4.method disabled ipv6.method disabled \
                    > /sysroot/etc/NetworkManager/system-connections/xenbr0.nmconnection
            # vlan
            $CHROOT nmcli --offline connection add type vlan con-name vlan20 \
                    vlan.id 20 vlan.parent xenbr0 802-3-ethernet.cloned-mac-address stable \
                    ipv6.method disabled > /sysroot/etc/NetworkManager/system-connections/vlan20.nmconnection
            ;;
        "Bonded Trunk")
            # slaves
            $CHROOT nmcli --offline connection add type bond-slave ifname $dev master bond0 \
                    > /sysroot/etc/NetworkManager/system-connections/$dev.nmconnection
            $CHROOT nmcli --offline connection add type bond-slave ifname $dev2 master bond0 \
                    > /sysroot/etc/NetworkManager/system-connections/$dev2.nmconnection
            # bond0
            $CHROOT nmcli --offline connection add type bond con-name bond0 mode active-backup \
                    connection.interface-name bond0 \
                    ipv4.method disabled ipv6.method disabled \
                    > /sysroot/etc/NetworkManager/system-connections/bond0.nmconnection
            # vlan
            $CHROOT nmcli --offline connection add type vlan con-name vlan20 \
                    vlan.id 20 vlan.parent bond0 802-3-ethernet.cloned-mac-address stable \
                    ipv6.method disabled > /sysroot/etc/NetworkManager/system-connections/vlan20.nmconnection
            ;;
        "Xen Bridge on Bonded Trunk")
            # slaves
            $CHROOT nmcli --offline connection add type bond-slave ifname $dev master bond0 \
                    > /sysroot/etc/NetworkManager/system-connections/$dev1.nmconnection
            $CHROOT nmcli --offline connection add type bond-slave ifname $dev2 master bond0 \
                    > /sysroot/etc/NetworkManager/system-connections/$dev2.nmconnection
            # bond0
            $CHROOT nmcli --offline connection add type bond con-name bond0 mode active-backup \
                    connection.interface-name bond0 \
                    connection.master xenbr0 connection.slave-type bridge \
                    > /sysroot/etc/NetworkManager/system-connections/bond0.nmconnection
            # xenbr0
            $CHROOT nmcli --offline connection add type ethernet con-name xenbr0 \
                    connection.interface-name xenbr0 \
                    ipv4.method disabled ipv6.method disabled \
                    > /sysroot/etc/NetworkManager/system-connections/xenbr0.nmconnection
            # vlan
            $CHROOT nmcli --offline connection add type vlan con-name vlan20 \
                    vlan.id 20 vlan.parent xenbr0 802-3-ethernet.cloned-mac-address stable \
                    ipv6.method disabled > /sysroot/etc/NetworkManager/system-connections/vlan20.nmconnection
            ;;
        None)
            # easy, nothing to do
            ;;
        *)
            # shouldn't get here
            return 1
    esac

    if [ "$1" != "None" ]; then
        chmod 600 /sysroot/etc/NetworkManager/system-connections/*.nmconnection
        # NOTE: Since we're in --offline, any connection we create that's
        #       referenced by another connection will print a warning (e.g.,
        #       Warning: master 'bond0' doesn't exist) on stdout along with the
        #       file we're generating.  Nice.  Let's make that a comment, shall
        #       we.
        #
        sed -i 's|^Warning:|# Warning:|' /sysroot/etc/NetworkManager/system-connections/*.nmconnection
    fi
}

dlg_desktop()
{
    go=$DLG
    go="$go --title 'Default Boot Target'"
    go="$go --yesno 'The full graphical desktop environment has been installed, do you want to launch it by default?'"
    go="$go 0 0"
    eval $go
}

dlg_xen()
{
    go=$DLG
    go="$go --title 'Xen'"
    go="$go --yesno 'Xen has been installed, do you want to boot into it by default (starting at next boot)?'"
    go="$go 0 0"
    eval $go
}

dlg_exit()
{
    go=$DLG
    go="$go --title 'Goodbye...'"
    go="$go --msgbox 'You have opted to exit partway through configuration... things might be a little messy.' 0 0"
    eval $go
}

dlg_done()
{
    go=$DLG
    go="$go --title 'Outstanding!'"
    go="$go --msgbox \"Finished! You can run this again by removing $FIRSTBOOT_DONE_FILE and adding 'firstboot' to your boot args.\" 0 0"
    eval $go
}

#firstboot_dryrun=y
firstboot_wizard()
{
    trap "emergency_shell" 0 2
    set -e

    dlg_welcome || return
    # get hostname
    if dlg_hostname && [ -z "$firstboot_dryrun" ] && [ "$(cat /sysroot/etc/hostname)" != "$HOSTNAME" ]; then
        # update if actually different
        echo $HOSTNAME > /sysroot/etc/hostname
        $CHROOT dbus-uuidgen > /sysroot/etc/machine-id
    fi
    # initial user setup
    #
    # NOTE: We only do this ONCE, if localadmin hasn't been added yet.
    #
    if ! $CHROOT id localadmin >/dev/null 2>&1; then
        # get root pw
        if dlg_pw_loop root && [ -z "$firstboot_dryrun" ]; then
            echo -e "$PW\n$PW2" | $CHROOT passwd root
        fi
        # get localadmin pw, then create that user
        if dlg_pw_loop localadmin && [ -z "$firstboot_dryrun" ]; then
            $CHROOT useradd -c "Local Administrator" -G adm,sudo,cdrom,dip,plugdev -m -s /bin/zsh localadmin
            echo -e "$PW\n$PW2" | $CHROOT passwd localadmin
        fi
    fi
    # timezone
    if [ -z "$firstboot_dryrun" ]; then
        $CHROOT dpkg-reconfigure tzdata
    fi
    # locale
    if [ -z "$firstboot_dryrun" ]; then
        $CHROOT dpkg-reconfigure locales
    fi
    # networking
    if dlg_networking && [ -z "$firstboot_dryrun" ]; then
        configure_networking "$NETWORKING"
    fi

    #
    # FIXME: maybe some type of performance vs powersave settings?  i honestly
    #        haven't poked at this at all since bionic, is there still an
    #        ondemand systemd service?
    #
    #        this looks to be a non-issue when graphical.target is in use,
    #        because it's super easy to tune via Gnome's panel (about time...),
    #        but it might be nice to give an easy button to console-only
    #        setups.
    #
    #        it's gonna be a little complicated, though, because it depends on
    #        intel or amd, and then depends on specific hardware supported,
    #        etc...  I suppose we could just ask performance or powersave and
    #        translate that accordingly (intel-pstate with hardware:
    #        performance, powersace, inte-pstate w/out hardware: performance,
    #        powersave, amd-pstate: ?, generic: performace, powersave).  I
    #        guess the names line up mostly, although the sysfs paths might not
    #
    #        and actually, the gnome-power-manager doesn't look like it's
    #        changing the current cpu scaling governor... but it is changing
    #        the current cpu freq... odd.
    #
    #        I'm thinking we'll leave this alone for now... 99% of systems that
    #        care about this setting are going to be desktop installations with
    #        access to gnome-power-manager anyway.
    #

    # default target - if gdm3 installed
    #
    # NOTE: We check to see if gdm3 is installed, because the graphical.target
    #       is installed by systemd prior to the rest of the desktop
    #       environment actually being installed.  We can't key off of
    #       ubuntu-desktop, because we remove it (so that we can remove the
    #       silly graphical apt update pop ups that just won't go away
    #       otherwise).
    #
    # FIXME: assuming this works ok, should we attempt to add `quiet splash` to
    #        kernel command line in syslinux.cfg (and possibly xen.cfg)?  Could
    #        sed on loglevel=2 pretty easily...
    #
    $CHROOT dpkg -s gdm3 2>/dev/null >/tmp/desktop || echo -n
    if [ -s /tmp/desktop ] && dlg_desktop && [ -z "$firstboot_dryrun" ]; then
        $CHROOT systemctl set-default graphical.target
    fi
    # boot into xen
    $CHROOT dpkg -s xen 2>/dev/null >/tmp/xen || echo -n
    if [ -s /tmp/xen ] && dlg_xen && [ -z "$firstboot_dryrun" ]; then
        efi_set_bootorder_first xen
    fi
    # remove cruft
    #
    # NOTE: It would be nice if we didn't need this... but chances are, we'll
    #       always notice some errantly included packages that should be
    #       removed from the sqsh_images.  This is where we can remove them at
    #       the 11.9th hour w/out the user ever seeing thing.
    #
    # FIXME: oh, dear... it looks like we don't have any snaps installed.  I
    #        thought installing firefox via apt automatically pulled in the
    #        snap...?  It normally does, but from within `debootstrap`, it
    #        definately does not.  And I can't do that here, we don't have
    #        networking yet.
    #
    $CHROOT apt remove -y --autoremove gnome-initial-setup || echo -n
    dlg_done || echo -n
    if [ -z "$firstboot_dryrun" ]; then
        touch /sysroot/$FIRSTBOOT_DONE_FILE
    fi
    trap 0 2
}


if [ -z "$JUST_SOURCE" ]; then
    [ -f /sysroot/$FIRSTBOOT_DONE_FILE ] || firstboot_wizard
fi
