#!/bin/bash
#
# RuckusRD - a super awesome, yet simple, mkinitrd replacement
#
# Copyright 2012-2021 Michael D Labriola <michael.d.labriola@gmail.com>
#
# Licensed under the GPLv3. See the file COPYING for details. 
#
# This script is a utility for creating a self extracting executable that runs
# an install script after extracting to a temp directory.


usage()
{
    if [ -n "$*" ]; then
        echo ERROR: $*
        echo
    fi
    echo "extractenator - a self-extracting installer creator"
    echo "Copyright (C) 2012-2021 Michael D Labriola <michael.d.labriola@gmail.com>"
    echo
    echo "usage: `basename $0` OPTIONS PAYLOAD..."
    echo
    echo "  -f, --filename EXEFILE    Specify output filename. (REQUIRED)"
    echo
    echo "  -s, --script SCRIPT       Specify installation script to be run after"
    echo "                            extraction.  SCRIPT will be included as archive"
    echo "                            content, you don't have to also specify it as"
    echo "                            payload. (REQUIRED)"
    echo
    echo "  -c, --compressor COMP     Use COMP compressor in pipeline during archive"
    echo "                            creation.  Valid compressors are 'gzip', 'bzip2',"
    echo "                            'xz', 'zstd', or 'none'.  Default is 'xz' w/"
    echo "                            --compressor-args of -T0.  If COMP is specified as"
    echo "                            'none', no compressor is used (e.g., if payload"
    echo "                            files are already compressed)."
    echo
    echo "  -C, --compressor-args ARGS  Pass ARGS into the specified compressor.  If"
    echo "                              --compressor was specified, defaults to empty"
    echo "                              string.  Otherwise, default is '-T0' to go along"
    echo "                              with the default  xz compressor.  Can be provided"
    echo "                              multiple times, causing argurments to be appended"
    echo "                              (i.e., becaue you cannot have spaces in ARGS)."
    # NOTE: Here's the last round of compressor benchmarking I did on a Ryzen 7
    #       2700X (8 cores/16 threads).
    #
    #       xz:     62M  1:50
    #       xz -T0: 63M  0:14.8
    #       gzip:   83M  0:08.9
    #       bzip2:  76M  0:16.9
    #       zstd:   82M  0:01.8
}


# call getopt
#
# NOTE: This handles spacing out arguments correctly for the case statement
#       below and checks for unknown flags.  Required flags are checked for
#       below.
#
# NOTE: The set -- command causes the resulting output of getopt to replace the
#       current positional arguments (e.g, $1, $2).
#
__opts=$(getopt -un $(basename $0) \
    -o hf:s:c:C: \
    --long help,filename:,script:,compressor:,compressor-args: -- $@)
if [ $? != 0 ]; then
    echo
    usage
    exit 1
fi
set -- $__opts

# defaults
comp="xz"
decomp="xzcat"
compargs="-T0"

# parse the new positional arguments
while true; do
    case "$1" in
        -f|--filename)
            filename=$2
            shift 2
            ;;
	-s|--script)
            script=$2
            shift 2
            ;;
	-c|--compressor)
            compargs=
            case $2 in
                gzip)
                    comp="gzip"
                    decomp="zcat"
                    ;;
                bzip2)
                    comp="bzip2"
                    decomp="bzcat"
                    ;;
                xz)
                    comp="xz"
                    decomp="xzcat"
                    ;;
                zstd)
                    comp="zstd"
                    decomp="zstdcat"
                    ;;
                none)
                    comp="cat"
                    decomp="cat"
                    ;;
                *)
                    usage "invalid compressor specified: $2"
                    exit 1
                    ;;
            esac
            shift 2
            ;;
        -C|--compressor-args)
            compargs+=" $2"
            shift 2
            ;;
	--)
            # done parsing
            shift
            break
            ;;
	*)
            usage
            exit 1
            ;;
    esac
done
payload=$*

# check for required options
if [ -z "$filename" ]; then
    usage "--filename required"
    exit 1
fi
if [ -z "$script" ]; then
    usage "--script required"
    exit 1
fi
if [ -z "$payload" ]; then
    usage "PAYLOAD required"
    exit 1
fi

echo filename: $filename
echo script: $script
echo comp: $comp
echo compargs: $compargs
echo decomp: $decomp
echo payload: $payload


# create the initial extraction script
echo -n "creating $filename... "
cat > $filename <<EOF
#!/bin/sh
skip=__SKIP__

tmpdir=\`mktemp -dt \\\`basename \$0\\\`-XXXX\`

echo -n "extracting archive to \$tmpdir... "
(tail -n +\$skip \$0 | $decomp | tar -x --no-same-owner --no-same-permissions -C \$tmpdir) && echo DONE || { echo FAIL; exit 1; }

while [ \$# -gt 0 ] ; do
    case "\$1" in
        --dry-run|-n)
            echo "dry-run, installation script will not be run, tmpdir will not be cleaned up"
            exit 0
            ;;
        --help|-h|*)
            echo "usage: $filename [--dry-run|-n]"
            exit 0
            ;;
    esac
done

pushd \$tmpdir >/dev/null
`cat $script`
popd >/dev/null

echo -n "removing \$tmpdir... "
rm -rf \$tmpdir && echo DONE || { echo FAIL; exit 1; }

exit 0
EOF
[ $? -eq 0 ] && echo DONE || { echo FAIL; exit 1; }

# sed the actual length into it
skip=$((`wc -l $filename | awk '{print $1}'`+1))
echo skip: $skip
sed -i "s|__SKIP__|$skip|" $filename

# and now append the payload
echo -n "appending payload... "
(tar -c $payload | $comp $compargs >> $filename) || { echo FAIL; exit 1; }
echo DONE

# and make it executable
echo -n "making $filename executable... "
chmod +x $filename && echo DONE || { echo FAIL; exit 1; }

exit 0
