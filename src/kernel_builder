#!/bin/bash
#
# RuckusRD - a super awesome, yet simple, mkinitrd replacement
#
# Copyright 2012-2019 Michael D Labriola <michael.d.labriola@gmail.com>
#
# Licensed under the GPLv3. See the file COPYING for details. 
#
# This script is a utility for building the Linux kernel and installing it and
# all needed files into a local directory.  After doing this, you can execute
# kernel_installer (which installs to a remote host) or kernel_tar (which
# creates a self-extracting installer).


is_enabled() {
	grep -q "^$1=y" include/config/auto.conf
}


if [ -z "$MAKE" ]; then
    MAKE="make"
fi
export MAKE

export SRP_ROOT=$PWD/FOO

rm -rf $SRP_ROOT

CPUCOUNT=`grep processor /proc/cpuinfo | wc -l`
# using CPUCOUNT*4 here because KBuild uses recursive Make calls... this
# seems to mostly equate to a normal package's -jCPUCOUNT+1
if [ -z "$NUMJOBS" ]; then
    NUMJOBS=$((CPUCOUNT*4))
fi

# build
$MAKE -j$NUMJOBS || exit 1

# build/install modules
$MAKE INSTALL_MOD_PATH=$SRP_ROOT modules_install || exit 2

VERSION=$(basename $SRP_ROOT/lib/modules/*)
VERSION_NAME=$VERSION
if [ -n "$NOVERSION" ]; then
    VERSION_NAME=test
fi

# create initrd using ruckusrd
mkdir -p $SRP_ROOT/boot &&
ruckusrd -v -b $SRP_ROOT $SRP_ROOT/boot/initrd-$VERSION_NAME.img $VERSION || exit 3

# install other /boot files in SRP_ROOT
for x in arch/*/boot/bzImage; do
    if [ ! -h $x ]; then
        vmlinuz=$x
        break
    fi
done
SRCARCH=$(basename $(dirname $(dirname $vmlinuz)))
cp -v $vmlinuz $SRP_ROOT/boot/vmlinuz-$VERSION_NAME &&
cp -v System.map $SRP_ROOT/boot/System.map-$VERSION_NAME &&
cp -v .config $SRP_ROOT/boot/config-$VERSION_NAME || exit -1

# remove firmware, that should be handled by a linux-firmware package and we
# don't want to overwrite it
rm -rfv $SRP_ROOT/lib/firmware || exit -1

# install kernel headers
#
echo -n "populating $SRP_ROOT/usr/src/linux-headers-$VERSION... "
# NOTE: This should be enough to support out-of-tree module building.  It's
#       mostly lifted from the kernel's srcipts/package/builddeb script.
#
# 1. create .hdrsrcfiles
find . -name Makefile\* -o -name Kconfig\* -o -name \*.pl > $SRP_ROOT/.hdrsrcfiles
find arch/*/include include scripts -type f -o -type l >> $SRP_ROOT/.hdrsrcfiles
find arch/$SRCARCH -name module.lds -o -name Kbuild.platforms -o -name Platform >> $SRP_ROOT/.hdrsrcfiles
find $(find arch/$SRCARCH -name include -o -name scripts -type d) -type f >> $SRP_ROOT/.hdrsrcfiles
#
# 2. create .hdrobjfiles
if is_enabled CONFIG_STACK_VALIDATION; then
    find tools/objtool -type f -executable >> $SRP_ROOT/.hdrobjfiles
fi
find arch/$SRCARCH/include Module.symvers include scripts -type f >> $SRP_ROOT/.hdrobjfiles
if is_enabled CONFIG_GCC_PLUGINS; then
    find scripts/gcc-plugins -name \*.so -o -name gcc-common.h >> $SRP_ROOT/.hdrobjfiles
fi
#
# 3. copy files according to .hdrsrcfiles and .hdrobjfiles
destdir=$SRP_ROOT/usr/src/linux-headers-$VERSION
mkdir -p "$destdir"
tar -c -f - -T - < $SRP_ROOT/.hdrsrcfiles | (cd $destdir; tar -xf -)
tar -c -f - -T - < $SRP_ROOT/.hdrobjfiles | (cd $destdir; tar -xf -)
echo DONE
#
# 4. set build symlink in modules dir to point at header tree
rm -f $SRP_ROOT/lib/modules/$VERSION/{build,source}
ln -vsf /usr/src/linux-headers-$VERSION $SRP_ROOT/lib/modules/$VERSION/build
#
# 5. cleanup
rm -f $SRP_ROOT/.hdrsrcfiles $SRP_ROOT/.hdrobjfiles

echo VERSION: $VERSION
echo VERSION_NAME: $VERSION_NAME
