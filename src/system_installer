#!/bin/ash
#
# Copyright 2012-2025 Michael D Labriola <veggiemike@sourceruckus.org>
#
# Licensed under the GPLv3. See the file COPYING for details. 
#

. /ruckusrd-common.sh

DLG="whiptail --backtitle 'Source Ruckus System Installer (hostname=$(hostname))'"
TTYSTR=$(tty 2>/dev/null)
TTYSTR=${TTYSTR//\//-}
ALREADY_DONE=/tmp/.system_installer_done-$TTYSTR


# NOTE: The emergency_shell() function from ruckusrd-common does shenanigans to
#       get a controlling tty for bash... this seems unneeded at this point,
#       and has been causing terminal input corruption... but not always.
#       Luckily all the shenanigans are in a seperate function called
#       control_shell, which we can redefine here to just call `bash`.
#
control_shell()
{
    bash
}


user_abort()
{
    # unset our trap so we can exit normally
    trap 0 2
    echo "Installation aborted by user"
    exit 0
}


# NOTE: Employing shenanigans in all these dlg_* functions to prevent bash's
#       `set -e` from flagging exiting dialogs as errors...  KEEP_GOING will be
#       unset if the user is trying to exit, so we can handle that in the
#       calling function.
#
dlg_welcome()
{
    go=$DLG
    go="$go --title 'Welcome!'"
    go="$go --yesno 'Welcome to the Source Ruckus System Installer!\n\nContinue?'"
    go="$go 0 0"
    KEEP_GOING=$(eval $go 3>&1 1>&2 2>&3 && echo yes || echo -n)
    #echo "KEEP_GOING=$KEEP_GOING"
}


dlg_pick_top_layer()
{
    go=$DLG
    go="$go --title 'Top layer selection'"
    go="$go --menu 'Please select the desired installation type'"
    go="$go 0 0 0"
    for l in $*; do
        desc=${l//.sqsh/}_description
        desc=${desc//-/_}
        go="$go $l \"$(eval echo \$$desc)\""
    done
    TOP_LAYER=$(eval $go 3>&1 1>&2 2>&3 || echo -n)
    [ -n "$TOP_LAYER" ] && KEEP_GOING=yes || KEEP_GOING=
    #echo TOP_LAYER=$TOP_LAYER
    #echo KEEP_GOING=$KEEP_GOING
}


dlg_summary()
{
    go=$DLG
    go="$go --title 'Configuration Summary'"
    go="$go --yesno 'Top Layer: $TOP_LAYER\nLayers: $layers\nDisks: $disks\nBlock Size: $bsize\nAshift: $ashift\nVDEV Type: $vdev_type\nCreate ESP: $create_esp\nESP Size: $espsize\nModify EFIVARS: $modify_efivars\nSwap: $swap\n\nContinue?'"
    go="$go 0 0"
    KEEP_GOING=$(eval $go 3>&1 1>&2 2>&3 && echo yes || echo -n)
    #echo "KEEP_GOING=$KEEP_GOING"
}


# FIXME: implement this
#
#manual_install()
#{
#    # check for efi - if available prompt user on wether or not we should
#    # manage ESP creation and select disk/partition for it
#
#    # prompt for swap amount and disk/partition
#
#    # use pre-existing zpool if found?  prompt for disks/partitions to use if
#    # not?
#}


# find first non-virtual block device (that hasn't been excluded) and other
# disks of the same size (for a single vdev of either mirror or raidz)
autopick_disks()
{
    disks=
    size=
    bsize=
    diskcount=0
    for x in /sys/block/*; do
        this_dev=/dev/$(basename $x)
        # skip virtual devices (e.g., loop0)
        (readlink $x | grep -q virtual) && continue
        # skip anything in real_excludes
        (echo $real_excludes | grep -q $this_dev) && continue
        # skip our rootdev
        [ "$this_dev" = "$real_rootdev" ] && continue
        # skip our imgdev
        [ "$this_dev" = "$real_imgdev" ] && continue
        # lookup disk info
        this_size=$(cat $x/size)
        this_bsize=$(cat $x/queue/physical_block_size)
        if [ -n "$size" ]; then
            # we've already picked a disk, make sure if we add another it's the
            # same size
            [ "$size" != $this_size ] && continue
            # same but check for matching block size
            [ "$bsize" != $this_bsize ] && continue
            # ok, add it
            disks="$disks $this_dev"
            diskcount=$((diskcount+1))
        else
            # disks list empty, this one looks good.  :-)
            disks=$this_dev
            size=$this_size
            bsize=$this_bsize
            diskcount=1
        fi
        # stop if we just added the max number of disks
        [ $diskcount -ge $vdev_maxsize ] && break
    done

    if [ $diskcount -lt 2 ]; then
        vdev_type=
    elif [ $diskcount -eq 2 ]; then
        vdev_type=mirror
    else
        vdev_type=raidz
    fi
}


calc_ashift()
{
    x=$1
    ashift=0
    while [ $x -gt 1 ]; do
        x=$((x>>1))
        ashift=$((ashift+1))
    done
    echo $ashift
}


partition_disks()
{
    zfspart=1
    swappart=1
    esppart=1
    echo "label: gpt" > /tmp/ptable
    if [ -n "$create_esp" ]; then
        # NOTE: Most "regular" installations I've seen use a really small
        #       partition (256M or 512M), but we're going to use ESP as the
        #       actual /boot partition and I like to keep a couple development
        #       kernels and large initrds in there.  So our default size is 1G,
        #       overridable via the ESP= kernel command line arg.
        #
        echo ",$espsize,U" >> /tmp/ptable
        zfspart=$((zfspart+1))
        swappart=$((swappart+1))
    fi
    if [ -n "$swap" ] && [ "$swap" != "0" ]; then
        # NOTE: I thought about using LVM for swap... but it wouldn't really
        #       buy us anything but increased complexity, especially since
        #       we're using the remaining space in a ZFS pool.  About the only
        #       benefit I can come up with is that the user would be able to
        #       shrink swap later if desired... so we just use a straight up
        #       regular partition for swap.
        #
        echo ",$swap,S" >> /tmp/ptable
        zfspart=$((zfspart+1))
    fi
    echo ",,L" >> /tmp/ptable

    zfsdisks=
    swapdisks=
    espdisks=
    for d in $disks; do
        sfdisk $d < /tmp/ptable
        # figure out if partition identifier is pN or just N (e.g., sda1 vs
        # nvme0n1p1)
        if [ -e ${d}p1 ]; then
            zfspart="p$zfspart"
            swappart="p$swappart"
            esppart="p$esppart"
        fi
        zfsdisks="$zfsdisks $d$zfspart"
        [ -n "$create_swap" ] && swapdisks="$swapdisks $d$swappart"
        [ -n "$create_esp" ] && espdisks="$espdisks $d$esppart"
    done

    # remove outdated EFI bootnums
    #
    # NOTE: This is detected earlier after disk selection.  It's every
    #       existing EFI bootnum that will be invalidated by nuking our
    #       selected disk(s).
    #
    decho "modify_efivars: $modify_efivars"
    decho "efi_bootnums_to_remove: '$efi_bootnums_to_remove'"
    if [ -n "$modify_efivars" ] && [ -n "$efi_bootnums_to_remove" ]; then
        efibootmgr -v
        for x in $efi_bootnums_to_remove; do
            efibootmgr -v -b $x -B > $efibootcache
        done
        efibootmgr -v
    fi
}


auto_install()
{
    # find first non-virtual block device (that isn't rootdev or imgdev) and
    # any other disks of the same size
    autopick_disks
    decho2 disks: $disks
    decho2 size: $size
    decho2 bsize: $bsize
    decho2 diskcount: $diskcount
    decho2 vdev_type: $vdev_type
    if [ -z "$disks" ]; then
        echo "ERROR: no disks detected! (excluded: $real_excludes)"
        return 1
    fi
    #echo "exit to continue" && control_shell

    # pick ashift for ZFS
    #
    # NOTE: We're doing this because of general distrust of "autodetect" block
    #       size when creating zfs pools.  Using ashift=0 is supposed to
    #       autodetect, but it doesn't seem to do a great job.  For example, on
    #       a Xen PVH with a virtual disk which reports logical block size of
    #       512 and physical of 64k, zfs sets the block device's ashift to 9
    #       (for 512 bytes) then complains mightily that you've misconfigured
    #       it and should really be 64k in zpool status output.
    #
    #       We are going to use ashift=12 for everything (even 512 byte disks,
    #       because there's no performance penalty), UNLESS the disk reports an
    #       even higher value (like the Xen virtual disks do).
    ashift=$(calc_ashift $bsize)
    [ $ashift -lt 12 ] && ashift=12
    decho2 ashift: $ashift

    # can we do EFI setup?
    if [ -z "$create_esp" ] && (efibootmgr >/dev/null 2>&1); then
        create_esp=y
        modify_efivars=y
    fi

    if [ -n "$modify_efivars" ]; then
        # NOTE: We're going to slick and repartition the selected disk(s), so
        #       any pre-existing EFI boot entries related to them are goint to
        #       become invalid.  We generate a list of EFI bootnums to remove
        #       here, then actually remove them later (after we've actually
        #       partitioned).
        #
        efi_bootnums_to_remove=
        for x in $disks; do
            efi_bootnums_to_remove="$efi_bootnums_to_remove $(efi_get_bootnum_by_disk $x)"
        done
        # chomp off leading whitespace
        efi_bootnums_to_remove=$(echo $efi_bootnums_to_remove)
        decho2 efi_bootnums_to_remove: $efi_bootnums_to_remove
    fi

    # pick a swap size based on ammount of RAM
    #
    # NOTE: Probably overkill, but I'll setup enough swap to support
    #       hibernation.  Ubuntu's recommendation is 1.5*RAM.  I'll calculate
    #       that and round up to the next whole gigabyte.
    #
    # NOTE: If we've got N disks in a zpool, they all get a swap partition, and
    #       we end up with N times the ammount of swap we actually wanted.
    #       Given that swap doesn't need to be contiguous (per google), we'll
    #       divide our swap size by number of disks to conserve space.  The
    #       only problem with that is we'll potentially loose the ability to
    #       suspend to disk w/ a failed disk in the zpool...  but we've got
    #       bigger fish to fry in that case.
    #
    if [ -n "$create_swap" ] && [ -z "$swap" ]; then
        # mem in kb
        mem=$(awk '/^MemTotal:/ {print $2}' /proc/meminfo)
        # 1.5*mem in G
        swap=$((mem*15/10/1024/1024+1))
        if [ $diskcount -gt 1 ]; then
            halfswap=$((swap/diskcount))
            # round up if needed
            if [ $((halfswap*diskcount)) -lt $swap ]; then
                halfswap=$((halfswap+1))
            fi
            swap=$halfswap
        fi
        swap="${swap}G"
    fi
    decho2 swap: $swap

    # summary - layers, disks, pool ashift, swap, EFI
    dlg_summary
    [ -n "$KEEP_GOING" ] || user_abort

    # partition if needed
    if [ -n "$create_esp" ] || [ -n "$create_swap" ]; then
        partition_disks
    else
        zfsdisks=$disks
        swapdisks=
    fi
    decho zfsdisks: $zfsdisks
    decho swapdisks: $swapdisks

    # create swap if desired
    #
    # NOTE: We have to record UUIDs of each swap partition (and later each ESP)
    #       so we can add appropriate lines to /etc/fstab.
    #
    echo -n > /tmp/fstab
    for d in $swapdisks; do
        go="mkswap $d"
        decho $go
        eval $go
        eval $(blkid $d -o export)
        echo "UUID=$UUID none swap sw 0 0" >> /tmp/fstab
    done

    # create pool
    mkdir -p /sysroot
    go="zpool create -f -o ashift=$ashift zroot"
    go="$go -O compression=zstd -O relatime=on -O atime=on"
    go="$go -O acltype=posixacl -O xattr=sa"
    [ -n "$vdev_type" ] && go="$go $vdev_type"
    go="$go $zfsdisks"
    go="$go -R /sysroot"
    decho $go
    eval $go

    # create datasets - zroot/root, zroot/home, zroot/sqsh
    zfs create zroot/root -o canmount=noauto
    zfs create zroot/sqsh -o canmount=noauto
    zfs create zroot/home -o mountpoint=/home

    # install sqsh_layers
    #
    # NOTE: We use rsync here instead of cp for a couple reasons:
    #
    #       1. Large files can take a looong time here... with no indication
    #          that anything is even happening.
    #
    #       2. The busybox cp applet doesn't support --preserve=timestamps,
    #          which we want (instead of full blown -a).  We want timestamps to
    #          be preserved, so that we can keep redundant ESPs sync'd w/
    #          rsync, but vfat is going to have heartburn if we use -a.
    #
    rsync="rsync -rltD -v --progress"
    zfs mount zroot/sqsh
    echo "installing sqsh_layer image files..."
    for l in $imgdir/${layers//:/.sqsh $imgdir/}.sqsh; do
        if [ -f $l ]; then
            # copy it
            $rsync $l /sysroot/zroot/sqsh/
        elif [ -f ${l}SPLIT00 ]; then
            echo "reconstructing $(basename $l) from $(echo $(basename -a ${l}SPLIT[0-9][0-9]))..."
            # reconstruct into image dir
            target=/sysroot/zroot/sqsh/$(basename $l)
            cat ${l}SPLIT[0-9][0-9] > $target
            # match timestamp w/ the 00 file
            touch -r ${l}SPLIT00 $target
        else
            # missing image file...
            echo "ERROR: missing required image file: $l"
            return 1
        fi
    done

    # ESP creation (and possibly EFIVAR manipulation)
    if [ -n "$create_esp" ]; then
        kernelversion=$(basename /tmproot/vmlinuz*)
        echo "kernelversion: $kernelversion"
        kernelversion=${kernelversion//vmlinuz-/}
        echo "kernelversion: $kernelversion"

        # figure out fwdevspec for kernel command line params
        #
        # NOTE: We have to loop over all the disks here, to get a list of all
        #       of them, before we iterate over the paritions installing files.
        #
        bootnum=1
        for d in $espdisks; do
            if [ $bootnum -gt 1 ]; then
                esp_label="ESP$bootnum"
                fwdevspec="$fwdevspec,LABEL=$esp_label"
            else
                esp_label="ESP"
                fwdevspec="fwdev=LABEL=$esp_label"
            fi
            bootnum=$((bootnum+1))
        done

        # create and populate primary ESP and copy to redundant ESPs
        #
        # NOTE: The first time through this loop, we manually populate the ESP
        #       with files.  Subsequent iterations just rsync to copy files.
        #
        # NOTE: We will end up with multiple EFI boot entries, one for each ESP
        #       (e.g., syslinux, syslinux2), to make sure the system is
        #       bootable even if the primary boot disk fails.
        #
        # FIXME: wait, aren't these going to end up backwards (e.g., boot2,
        #        boot1, boot) in the bootorder?  assuming we care, would it be
        #        easier to 1) create and add the esp partitions backwards, or
        #        2) fix the bootorder when finished?.
        #
        #        I'll take option 2, since we already need a way to switch
        #        between xen-default and syslinux-default, the code will be
        #        mostly written by the time i care about the ordering be
        #        backwards.
        #
        bootnum=1
        for d in $espdisks; do
            if [ $bootnum -gt 1 ]; then
                esp_label="ESP$bootnum"
            else
                esp_label="ESP"
            fi
            echo "preparing $esp_label $d..."

            # create and mount filesystem
            mkfs.vfat -n $esp_label $d
            mkdir -p /mnt/$esp_label
            mount $d /mnt/$esp_label

            if [ $bootnum -eq 1 ]; then
                # grab /boot files from configured sqsh_layers
                #
                # NOTE: This is done because we're going to mount our ESP at /boot,
                #       and it'll end up masking whatever was in there when we
                #       built the sqsh_layers.  Shouldn't be much, if anything
                #       (currently, xen*.{gz,efi,config} are the only files), but
                #       we don't want apt to get all angry later if a package's
                #       files are missing.
                #
                # NOTE: This looks in the target system, not the original
                #       imgdir, so that it can use reconstructed .sqsh files
                #
                echo "grabbing /boot files from sqsh_layers..."
                for l in $(echo $layers | tr ':' '\n' |tac | tr '\n' ' '); do
                    l=$l.sqsh
                    echo layer: $l
                    # NOTE: -no-xattrs because vfat doesn't support them and
                    #       unsquashfs will fail if we ask it to copy any.
                    unsquashfs -no-xattrs -f -d /mnt/$esp_label /sysroot/zroot/sqsh/$l /boot >/dev/null
                done
                if [ -n "$(ls /mnt/$esp_label/boot/)" ]; then
                    mv /mnt/$esp_label/boot/* /mnt/$esp_label/
                fi
                rmdir /mnt/$esp_label/boot

                # install kernel files
                echo "installing kernel files..."
                $rsync /tmproot/System.map* /tmproot/vmlinuz* /tmproot/initrd* /tmproot/config* /mnt/$esp_label

                # generate machine-specific fw.sqsh
                echo "creating machine-specific fw.sqsh..."
                firmwarenator -s /mnt/$esp_label/fw.sqsh
                unsquashfs -ll /mnt/$esp_label/fw.sqsh

                # install syslinux files
                echo "installing syslinux files..."
                mkdir -p /mnt/$esp_label/EFI/$efidir
                # FIXME: historically, I've just installed chain.c32, ldlinux.e64,
                #        libcom32.c32, libutil.c32, mboot.c32, menu.c32,
                #        syslinux.efi, and vesamenu.c32... (and i'm pretty sure
                #        vesamenu and mboot don't work for EFI, only BIOS) but just
                #        copying all the files sure is easier.  let's see what
                #        happens.
                #
                # FIXME: Also, what about the "default" place for EFI bootloaders?
                #        So we don't have to poke the system's EFI setup for
                #        bootable thumb drives and the like?
                #
                #        esp/EFI/syslinux/* -> esp/EFI/BOOT/*
                #        esp/EFI/syslinux/syslinux.efi -> esp/EFI/BOOT/bootx64.efi
                #
                #        My laptop refuses to boot from esp/EFI/BOOT unless I
                #        specifically add via efibootmgr... maybe I did it wrong?
                #
                #        Both the latest Ubuntu installer and the latest clonezilla
                #        ISO have /EFI/boot/bootx64.efi... given that ESP is
                #        supposed to be vfat, I can't imagine the capitalization
                #        really matters... but it *IS* different.
                #
                $rsync /usr/share/syslinux/efi64/* /mnt/$esp_label/EFI/$efidir/
                # rename syslinux.efi to the default bootx64.efi
                if [ "$efidir" == "boot" ]; then
                    mv -v /mnt/$esp_label/EFI/$efidir/syslinux.efi /mnt/$esp_label/EFI/$efidir/bootx64.efi
                fi

                # generate syslinux.cfg
                #
                # FIXME: i know a lot of this doesn't work... the color stuff, in
                #        paticular.  Should test and remove things that have no
                #        effect.
                #
                echo "generating syslinux.cfg..."
                cat > /mnt/$esp_label/EFI/$efidir/syslinux.cfg <<EOF
default menu.c32
timeout 50

menu title RuckusRD is your daddy!
menu rows 5
menu passwordrow 4
menu tabmsgrow 11
menu cmdlinerow 11
menu timeoutrow 13
menu endrow 17
menu color border 0 #ffffffff #00000000
menu color sel 7 #ffffffff #ffd09000
menu color title 0 #ffffffff #00000000
menu color tabmsg 0 #ffffffff #00000000
menu color unsel 0 #ffffffff #00000000
menu color hotsel 0 #ff000000 #ffffffff
menu color hotkey 7 #ffffffff #ff000000
menu color timeout_msg 0 #ffffffff #00000000
menu color timeout 0 #ffffffff #00000000
menu color cmdline 0 #ffffffff #00000000
menu hidden
menu hiddenrow 5
menu autoboot "Booting default in # second{,s}..."


label linux
 menu label Linux ($kernelversion)
 linux /vmlinuz-$kernelversion
 append initrd=/initrd-$kernelversion.img root=ZFS=zroot/root sqsh_layerdev=ZFS=zroot/sqsh sqsh_layers=$layers $fwdevspec firstboot ro consoleblank=300 loglevel=2
 menu default

label ruckus
 menu label RuckusRD Embedded System ($kernelversion, for maintenance)
 linux /vmlinuz-$kernelversion
 append initrd=/initrd-$kernelversion.img root=ZFS=zroot/root sqsh_layerdev=ZFS=zroot/sqsh sqsh_layers=$layers $fwdevspec firstboot ro consoleblank=300 loglevel=2 initramsys
EOF

                # generate xen.cfg
                #
                # FIXME: dom0_mem is hardocded to 4G... I don't remember the
                #        rationale behind that on my laptop which had 8G total
                #        RAM.
                #
                # FIXME: i also should re-test other params... ucode=scan in
                #        particular i don't remember how exactly works...
                #
                if [ -f /mnt/$esp_label/xen*.efi ]; then
                    echo "Generating xen.cfg..."
                    cat > /mnt/$esp_label/xen.cfg <<EOF
[global]
default=linux-$kernelversion

[linux-$kernelversion]
options=dom0_mem=4096M loglvl=all noreboot console_timestamps=boot ucode=scan
kernel=vmlinuz-$kernelversion root=ZFS=zroot/root sqsh_layerdev=ZFS=zroot/sqsh sqsh_layers=$layers $fwdevspec firstboot ro consoleblank=300 loglevel=2
ramdisk=initrd-$kernelversion.img

EOF
                fi

            else
                # rsync to this redundant ESP
                $rsync /mnt/ESP/ /mnt/$esp_label/
            fi

            # update fstab
            eval $(blkid $d -o export)
            if [ $bootnum -gt 1 ]; then
                echo "UUID=$UUID /boot$bootnum vfat defaults 1 1" >> /tmp/fstab
            else
                echo "UUID=$UUID /boot vfat defaults 1 1" >> /tmp/fstab
            fi

            # add boot entry to EFI
            #
            # NOTE: Here's what has to get done, for each ESP
            #
            #       efibootmgr -v -c -d /dev/sda -p 1 -l /EFI/syslinux/syslinux.efi -L syslinux
            #       efibootmgr -v -c -d /dev/sda -p 1 -l /xen-4.11.1.efi -L xen
            #
            # NOTE: Each entry gets added to the front of the boot list, so if
            #       I add syslinux and then xen, xen will be default.  With
            #       multiple ESPs, you'll end up with
            #       xen2,syslinux2,xen,syslinux as the boot order.  Ugly.  So
            #       we fix that down below after looping through the ESPs.
            #
            # NOTE: If label already exists, a warning gets printed out, the
            #       new bootnum is added, efi will still work... but that's
            #       gonna mess with things downstream when we try to lookup
            #       bootnums by label.  So we have to remove bootnum's with
            #       matching labels before adding new ones.
            #
            if [ -n "$modify_efivars" ]; then
                label=syslinux
                [ $bootnum -gt 1 ] && label="$label$bootnum"
                # first remove old matching entries
                oldone=$(efi_get_bootnum $label)
                if [ -n "$oldone" ]; then
                    go="efibootmgr -v -b $oldone -B"
                    decho $go
                    eval $go > $efibootcache || echo
                fi
                # now add the new one
                go="efibootmgr -v -c"
                # NOTE: Gotta check for N vs pN device partition naming (i.e.,
                #       sda1 vs nvme0n1p1) here.  We do it quickly by checking
                #       for the existence of $d with just the trailing digit(s)
                #       removed.
                bootdisk=$(echo $d | sed 's|[0-9]*$||')
                if [ ! -e "$bootdisk" ]; then
                    bootdisk=$(echo $d | sed 's|p[0-9]*$||')
                fi
                go="$go -d $bootdisk"
                bootpart=$(echo $d | grep -o '[0-9]*$')
                go="$go -p $bootpart"
                go="$go -l /EFI/$efidir/syslinux.efi"
                go="$go -L $label"
                decho $go
                eval $go > $efibootcache || echo "WARNING: efibootmgr failed"
            fi

            # add a xen entry to EFI, too
            if [ -n "$modify_efivars" ] && [ -f /mnt/$esp_label/xen*.efi ]; then
                label=xen
                [ $bootnum -gt 1 ] && label="$label$bootnum"
                # first remove old matching entries
                oldone=$(efi_get_bootnum $label)
                if [ -n "$oldone" ]; then
                    go="efibootmgr -v -b $oldone -B"
                    decho $go
                    eval $go > $efibootcache || echo
                fi
                # now add the new one
                go="efibootmgr -v -c"
                go="$go -d $bootdisk"
                go="$go -p $bootpart"
                go="$go -l /$(basename $(ls /mnt/$esp_label/xen*.efi))"
                go="$go -L $label"
                decho $go
                eval $go > $efibootcache || echo "WARNING: efibootmgr failed"
            fi

            # NOTE: We intentionally leave each ESP mounted, in case the user
            #       wants to poke at them prior to attempting to boot the
            #       system.

            echo "done with $d (LABEL=$esp_label)"
            bootnum=$((bootnum+1))
        done

        # now promote all the regular non-xen boot items to the front
        #
        # NOTE: The firstboot wizard will ask if you want Xen first later on.
        #
        # FIXME: what happens if we forced efi setup even though efibootmgr
        #        doesn't work?  i guess this won't do anything?
        #
        if [ -n "$modify_efivars" ]; then
            efi_set_bootorder_first syslinux
            cat $efibootcache
        fi
    fi

    # create fstab
    #
    # NOTE: This file gets installed in the upper layer of our eventual
    #       overlayfs mount.
    #
    zfs mount zroot/root
    mkdir -p /sysroot/zroot/root/upper/upper/etc
    # start w/ /etc/fstab from base image
    base=$(echo $layers | awk -F: '{print $NF}').sqsh
    unsquashfs -cat /sysroot/zroot/sqsh/$base etc/fstab > /sysroot/zroot/root/upper/upper/etc/fstab
    # add our generated additions (e.g., swap, boot)
    cat /tmp/fstab >> /sysroot/zroot/root/upper/upper/etc/fstab
    # add virtual filesystems from our initramfs
    echo "" >> /sysroot/zroot/root/upper/upper/etc/fstab
    cat /etc/fstab >> /sysroot/zroot/root/upper/upper/etc/fstab

    # ensure /boot mountpoint(s) exist
    for x in $(awk '{if ($2 ~ "/boot") {print $2}}' /tmp/fstab); do
        mkdir -p /sysroot/zroot/root/upper/upper/$x
    done

    # we don't really even have to assemble and mount sysroot...  just boot up
    # `firstboot` and the initial system groom will happen.
}


system_installer()
{
    dlg_welcome
    [ -n "$KEEP_GOING" ] || user_abort

    parse_boot_params $*

    # further parse initramsys-installer config
    imgdev=
    imgdir=images
    excludes=
    efidir=syslinux
    create_swap=y
    espsize=1G
    vdev_maxsize=3
    opts=${initramsys_installer_conf//,/ }
    for o in $opts; do
        case "$o" in
            IMGDEV=*)
                imgdev=${o#IMGDEV=}
                ;;
            IMGDIR=*)
                imgdir=${o#IMGDIR=}
                ;;
            EXCLUDE=*)
                excludes="$excludes ${o#EXCLUDE=}"
                ;;
            EFI=*)
                case "${o#EFI=}" in
                    default)
                        # create ESP but use default EFI bootnames and no
                        # efibootmgr calls
                        create_esp=y
                        efidir="boot"
                        modify_efivars=
                        ;;
                    force)
                        # force creation of ESP and attempt efibootmgr calls
                        # even if EFIVARS unavailable (e.g., booting from BIOS)
                        #
                        # NOTE: This sounds strange, but it's really for when
                        #       booting the installer on an EFI capable system
                        #       but from BIOS boot media (or misbehaving UEFI
                        #       firmwware).  In this case, the ESP gets created
                        #       and the user can fix the EFI configuration
                        #       afterwards by hand.
                        create_esp=y
                        modify_efivars=y
                        ;;
                    *)
                        decho "ignoring invalid initramsys_installer option $o"
                        ;;
                esac
                ;;
            SWAP=*)
                swap=${o#SWAP=}
                if [ "$swap" == "0" ]; then
                    create_swap=
                fi
                ;;
            ESP=*)
                espsize=${o#ESP=}
                ;;
            VDEV_MAXSIZE=*)
                vdev_maxsize=${o#VDEV_MAXSIZE=}
                ;;
            *)
                decho "ignoring invalid initramsys_installer config option $o"
                ;;
        esac
    done

    # resolve device name(s) - this will give us real_{devstring} and
    # {devstring}fstype
    #
    # NOTE: We explicitly lookup and supply fstype to mount calls below because
    #       relying on autodetection via mount command relies on filesystem
    #       modules already being loaded (e.g., is9660).
    #
    real_excludes=
    special_device_lookup rootdev $root
    decho2 "real_rootdev: $real_rootdev"
    decho2 "rootdevfstype: $rootdevfstype"
    real_excludes="$real_excludes $real_rootdev"
    if [ -n "$sqsh_layerdev" ]; then
        special_device_lookup sqsh_layerdev $sqsh_layerdev
        decho2 "real_sqsh_layerdev: $real_sqsh_layerdev"
        decho2 "sqsh_layerdevfstype: $sqsh_layerdevfstype"
        real_excludes="$real_excludes $real_sqsh_layerdev"
    fi
    if [ -n "$fwdev" ]; then
        special_device_lookup fwdev $fwdev
        decho2 "real_fwdev: $real_fwdev"
        decho2 "fwdevfstype: $fwdevfstype"
        real_excludes="$real_excludes $real_fwdev"
    fi
    if [ -n "$imgdev" ]; then
        special_device_lookup imgdev $imgdev
        decho2 "real_imgdev: $real_imgdev"
        decho2 "imgdevfstype: $imgdevfstype"
        real_excludes="$real_excludes $real_imgdev"
    fi
    decho2 "excludes: $excludes"
    for e in $excludes; do
        special_device_lookup e $e
        decho2 "real_e: $real_e"
        decho2 "efstype: $efstype"
        real_excludes="$real_excludes $real_e"
    done
    real_excludes=$(echo $real_excludes | tr " " "\n" | sort -u | tr "\n" " ")
    decho2 "real_excludes: $real_excludes"
    #echo "exit to continue" && control_shell

    # mount rootdev (if not already mounted)
    #
    # NOTE: Contains kernel files, boot files, and images unless imgdev
    #       specified
    #
    if ! (grep -q "^$real_rootdev /tmproot" /proc/mounts); then
        mkdir -p /tmproot
        # check to see if device is already mounted somewhere else (e.g.,
        # /fwdir), and use mount --bind if it is
        prevmp=$(grep "^$real_rootdev" /proc/mounts | awk '{print $2}')
        if [ -n "$prevmp" ]; then
            mount --bind $prevmp /tmproot
        else
            mount="mount"
            [ -n "$rootdevfstype" ] && mount="$mount -t $rootdevfstype"
            $mount $real_rootdev /tmproot
        fi
    fi

    # mount imgdev (if not already mounted)
    if [ -n "$real_imgdev" ] && ! (grep -q "^$real_imgdev /img" /proc/mounts); then
        mkdir -p /img
        # check to see if device is already mounted somewhere else (e.g.,
        # /fwdir), and use mount --bind if it is
        prevmp=$(grep "^$real_imgdev" /proc/mounts | awk '{print $2}')
        if [ -n "$prevmp" ]; then
            mount --bind $prevmp /img
        else
            mount="mount"
            [ -n "$imgdevfstype" ] && mount="$mount -t $imgdevfstype"
            $mount $real_imgdev /img
        fi
    fi

    # set imgdir to absolute path to our images
    if [ -n "$real_imgdev" ]; then
        imgdir="/img/$imgdir"
    else
        imgdir=/tmproot/$imgdir
    fi

    # locate images
    #
    # NOTE: The *.sqshSPLIT[0-9][0-9] files are created during ISO creation to
    #       workaround max file size limitations.  During installation we'll
    #       reassemble the pieces.
    #
    imgs=
    pushd $imgdir
    for x in *.sqsh *.sqshSPLIT[0-9][0-9]; do
        # check to see if glob matches any actual files
        [ -f $x ] && imgs="$imgs $x"
    done
    popd
    # now prune out the SPLIT files, removing duplicates
    imgs=$(echo $imgs | sed 's|SPLIT[0-9][0-9]||g' | tr ' ' '\n' | sort -u)
    decho2 "found imgs: $imgs"

    # load conf for images
    #
    # NOTE: This file, created during sourceruckus-deb build, describes the
    #       built sqsh images, and the dependencies between them.
    #
    sqshconf=$imgdir/sqsh_layers.conf
    if [ ! -f $sqshconf ]; then
        echo "ERROR: missing required file: $sqshconf"
        return 1
    fi
    . $sqshconf

    # prompt for uppermost layer
    dlg_pick_top_layer $imgs
    [ -n "$KEEP_GOING" ] || user_abort

    decho2 "TOP_LAYER: $TOP_LAYER"
    layers=${TOP_LAYER//.sqsh/}_layers
    layers=${layers//-/_}
    layers=$(eval echo \$$layers)
    decho2 "layers: $layers"

    # prompt for auto or manual configuration
    #
    # FIXME: implement this.  until then, we just run auto_install
    #
    auto_install

    # NOTE: It's convenient to have the sysroot left mounted at this
    #       point... so we leave it... revisit if that causes problems.
    #
    echo
    echo "Installation complete!  Reboot and test it out, or login below to poke around."
    if [ -z "$create_esp" ]; then
        echo
        echo "###############################################################################"
        echo
        echo "WARNING: EFI booting was NOT configured.  Make sure to add something like this"
        echo "         to the kernel command line of your bootloader:"
        echo
        echo "root=ZFS=zroot/root sqsh_layerdev=ZFS=zroot/sqsh sqsh_layers=$layers ro firstboot"
        echo
        echo "###############################################################################"
    fi
}


if [ -z "$JUST_SOURCE" ]; then
    # exit immediately if a command fails
    #
    # NOTE: We will have to be careful handling exit codes from the dialogs,
    #       which return non-zero depending on what the user selects.
    #
    trap "emergency_shell" 0 2
    set -e

    # When invoked via init, we want to run once, and then give way to a normal
    # tty.  This is accomplished by checking for the arg `once`, then if our
    # .aleady_done file is present, we just exec the remaining args.  This way
    # we can put something like this in inittab:
    #
    # tty1::respawn:/sbin/system_installer once sbin/getty 115200 tty1
    #
    if [ "$1" = "once" ]; then
        shift
        if [ -f $ALREADY_DONE ]; then
            exec $*
        fi
        go="touch $ALREADY_DONE"
        decho $go
        eval $go

        # We also want to sleep for a moment, so that kernel messages
        # finish printing out on the console before we put a dialog up.
        #
        # FIXME: hmm... there doesn't seem to be a magic number of seconds
        #        to sleep to consistently fix this.  3 works sometimes, but
        #        that's starting to get a little rediculous.  I suppose we
        #        can just run with `quiet` to avoid console output.
        #
        #sleep 3

        system_installer
    else
        # missing `once` should mean we're running by hand on the command line,
        # in which case let's pass $* along so we can override /proc/cmdline
        system_installer $*
    fi
    trap 0 2
fi
