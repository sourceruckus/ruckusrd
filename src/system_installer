#!/bin/ash
#
# Copyright 2012-2025 Michael D Labriola <veggiemike@sourceruckus.org>
#
# Licensed under the GPLv3. See the file COPYING for details. 
#

. /ruckusrd-common.sh

DLG="whiptail --backtitle 'Source Ruckus System Installer (hostname=$(hostname))'"
TTYSTR=$(tty 2>/dev/null)
TTYSTR=${TTYSTR//\//-}
ALREADY_DONE=/tmp/.system_installer_done-$TTYSTR


# NOTE: The emergency_shell() function from ruckusrd-common does shenanigans to
#       get a controlling tty for bash... this seems unneeded at this point,
#       and has been causing terminal input corruption... but not always.
#       Luckily all the shenanigans are in a seperate function called
#       control_shell, which we can redefine here to just call `bash`.
#
control_shell()
{
    bash
}


user_abort()
{
    # unset our trap so we can exit normally
    trap 0 2
    echo "installation aborted by user"
    exit 0
}


# NOTE: Employing shenanigans in all these dlg_* functions to prevent bash's
#       `set -e` from flagging exiting dialogs as errors...  KEEP_GOING will be
#       unset if the user is trying to exit, so we can handle that in the
#       calling function.
#
dlg_welcome()
{
    go=$DLG
    go="$go --title 'Welcome!'"
    go="$go --yesno 'Welcome to the Source Ruckus System Installer!\n\nContinue?'"
    go="$go 0 0"
    KEEP_GOING=$(eval $go 3>&1 1>&2 2>&3 && echo yes || echo -n)
    #echo "KEEP_GOING=$KEEP_GOING"
}


dlg_pick_top_layer()
{
    go=$DLG
    go="$go --title 'Top layer selection'"
    go="$go --menu 'Please select the desired installation type'"
    go="$go 0 0 0"
    for l in $*; do
        desc=${l//.sqsh/}_description
        desc=${desc//-/_}
        go="$go $l \"$(eval echo \$$desc)\""
    done
    TOP_LAYER=$(eval $go 3>&1 1>&2 2>&3 || echo -n)
    [ -n "$TOP_LAYER" ] && KEEP_GOING=yes || KEEP_GOING=
    #echo TOP_LAYER=$TOP_LAYER
    #echo KEEP_GOING=$KEEP_GOING
}


dlg_summary()
{
    go=$DLG
    go="$go --title 'Configuration Summary'"
    go="$go --yesno 'Top Layer: $TOP_LAYER\nLayers: $layers\nDisks: $disks\nBlock Size: $bsize\nAshift: $ashift\nSetup EFI: $can_efi\nSwap: $swap\n\nContinue?'"
    go="$go 0 0"
    KEEP_GOING=$(eval $go 3>&1 1>&2 2>&3 && echo yes || echo -n)
    #echo "KEEP_GOING=$KEEP_GOING"
}


# FIXME: implement this
#
#manual_install()
#{
#    # check for efi - if available prompt user on wether or not we should
#    # manage ESP creation and select disk/partition for it
#
#    # prompt for swap amount and disk/partition
#
#    # use pre-existing zpool if found?  prompt for disks/partitions to use if
#    # not?
#}


# find first non-virtual block device (that isn't rootdev or imgdev) and any
# other disks of the same size
autopick_disks()
{
    disks=
    size=
    bsize=
    for x in /sys/block/*; do
        this_dev=/dev/$(basename $x)
        # skip virtual devices (e.g., loop0)
        (readlink $x | grep -q virtual) && continue
        # skip our rootdev
        [ "$this_dev" = "$real_rootdev" ] && continue
        # skip our imgdev
        [ "$this_dev" = "$real_imgdev" ] && continue
        # lookup disk info
        this_size=$(cat $x/size)
        this_bsize=$(cat $x/queue/physical_block_size)
        if [ -n "$size" ]; then
            # we've already picked a disk, make sure if we add another it's the
            # same size
            [ "$size" != $this_size ] && continue
            # same but check for matching block size
            [ "$bsize" != $this_bsize ] && continue
            # ok, add it
            disks="$disks $this_dev"
        else
            # disks list empty, this one looks good.  :-)
            disks=$this_dev
            size=$this_size
            bsize=$this_bsize
        fi
    done
}


calc_ashift()
{
    x=$1
    ashift=0
    while [ $x -gt 1 ]; do
        x=$((x>>1))
        ashift=$((ashift+1))
    done
    echo $ashift
}


partition_disks()
{
    zfspart=1
    swappart=1
    esppart=1
    echo "label: gpt" > /tmp/ptable
    if [ -n "$can_efi" ]; then
        # NOTE: Most "regular" installations I've seen use a really small
        #       partition (256M or 512M), but we're going to use ESP as the
        #       actual /boot partition and I like to keep a couple development
        #       kernels and large initrds in there.  So our default size is 1G,
        #       overridable via the ESP= kernel command line arg.
        #
        echo ",$espsize,U" >> /tmp/ptable
        zfspart=$((zfspart+1))
        swappart=$((swappart+1))
    fi
    if [ -n "$swap" ] && [ "$swap" != "0" ]; then
        # NOTE: I thought about using LVM for swap... but it wouldn't really
        #       buy us anything but increased complexity, especially since
        #       we're using the remaining space in a ZFS pool.  About the only
        #       benefit I can come up with is that the user would be able to
        #       shrink swap later if desired... so we just use a straight up
        #       regular partition for swap.
        #
        echo ",$swap,S" >> /tmp/ptable
        zfspart=$((zfspart+1))
    fi
    echo ",,L" >> /tmp/ptable

    zfsdisks=
    swapdisks=
    espdisks=
    for d in $disks; do
        sfdisk $d < /tmp/ptable
        zfsdisks="$zfsdisks $d$zfspart"
        [ -n "$want_swap" ] && swapdisks="$swapdisks $d$swappart"
        [ -n "$can_efi" ] && espdisks="$espdisks $d$esppart"
    done
}


auto_install()
{
    # find first non-virtual block device (that isn't rootdev or imgdev) and
    # any other disks of the same size
    autopick_disks
    #decho disks: $disks
    #decho size: $size
    #decho bsize: $bsize

    # pick ashift for ZFS
    #
    # NOTE: We're doing this because of general distrust of "autodetect" block
    #       size when creating zfs pools.  Using ashift=0 is supposed to
    #       autodetect, but it doesn't seem to do a great job.  For example, on
    #       a Xen PVH with a virtual disk which reports logical block size of
    #       512 and physical of 64k, zfs sets the block device's ashift to 9
    #       (for 512 bytes) then complains mightily that you've misconfigured
    #       it and should really be 64k in zpool status output.
    #
    #       We are going to use ashift=12 for everything (even 512 byte disks,
    #       because there's no performance penalty), UNLESS the disk reports an
    #       even higher value (like the Xen virtual disks do).
    ashift=$(calc_ashift $bsize)
    [ $ashift -lt 12 ] && ashift=12
    #decho ashift: $ashift

    # can we do EFI setup?
    if [ -z "$can_efi" ] && (efibootmgr >/dev/null 2>&1); then
        can_efi=y
    fi

    # how much ram - pick a swap size
    #
    # NOTE: I've historically NOT used any swap on Xen virtual machines.
    #       Initially this was to limit conplexity (uh, or I was lazy), but
    #       I've seen zero reason to add swap to these systems over the years.
    #       So I will continue to not do it.
    #
    # NOTE: Probably overkill, but I'll setup enough swap to support
    #       hibernation.  Ubuntu's recommendation is 1.5*RAM.  I'll calculate
    #       that and round up to the next whole gigabyte.
    #
    # NOTE: If we've got N disks in a zpool, they all get a swap partition, and
    #       we end up with N times the ammount of swap we actually wanted.
    #       Given that swap doesn't need to be contiguous (per google), we'll
    #       divide our swap size by number of disks to conserve space.  The
    #       only problem with that is we'll potentially loose the ability to
    #       suspend to disk w/ a failed disk in the zpool...  but we've got
    #       bigger fish to fry in that case.
    #
    if [ -z "$want_swap" ] && [ "$swap" != "0" ] && [ -n "$can_efi" ] && [ "$can_efi" != "default" ]; then
        want_swap=1
    fi
    if [ -n "$want_swap" ]; then
        if [ -z "$swap" ]; then
            # mem in kb
            mem=$(awk '/^MemTotal:/ {print $2}' /proc/meminfo)
            # 1.5*mem in G
            swap=$((mem*15/10/1024/1024+1))
            numdisks=$(echo $disks | wc -w)
            if [ $numdisks -gt 1 ]; then
                halfswap=$((swap/numdisks))
                # round up if needed
                if [ $((halfswap*numdisks)) -lt $swap ]; then
                    halfswap=$((halfswap+1))
                fi
                swap=$halfswap
            fi
            swap="${swap}G"
        fi
    fi
    #decho swap: $swap

    # summary - layers, disks, pool ashift, swap, EFI
    dlg_summary
    [ -n "$KEEP_GOING" ] || user_abort

    # partition if needed
    if [ -n "$can_efi" ] || [ -n "$want_swap" ]; then
        partition_disks
    else
        zfsdisks=$disks
        swapdisks=
    fi
    decho zfsdisks: $zfsdisks
    decho swapdisks: $swapdisks

    # create swap if desired
    #
    # NOTE: We have to record UUIDs of each swap partition (and later each ESP)
    #       so we can add appropriate lines to /etc/fstab.
    #
    echo -n > /tmp/fstab
    for d in $swapdisks; do
        go="mkswap $d"
        decho $go
        eval $go
        eval $(blkid $d -o export)
        echo "UUID=$UUID none swap sw 0 0" >> /tmp/fstab
    done

    # create pool
    mkdir -p /sysroot
    go="zpool create -o ashift=$ashift zroot"
    if [ "$(echo $disks | wc -w)" != "1" ]; then
        go="$go mirror"
    fi
    go="$go -O compression=zstd -O relatime=on -O atime=on"
    go="$go -O acltype=posixacl -O xattr=sa"
    go="$go $zfsdisks"
    go="$go -R /sysroot"
    decho $go
    eval $go

    # create datasets - zroot/root, zroot/home, zroot/sqsh
    zfs create zroot/root -o canmount=noauto
    zfs create zroot/sqsh -o canmount=noauto
    zfs create zroot/home -o mountpoint=/home

    # install sqsh_layers
    #
    # NOTE: We use rsync here instead of cp for a couple reasons:
    #
    #       1. Large files can take a looong time here... with no indication
    #          that anything is even happening.
    #
    #       2. The busybox cp applet doesn't support --preserve=timestamps,
    #          which we want (instead of full blown -a).  We want timestamps to
    #          be preserved, so that we can keep redundant ESPs sync'd w/
    #          rsync, but vfat is going to have heartburn if we use -a.
    #
    rsync="rsync -rltD -v --progress"
    zfs mount zroot/sqsh
    echo "installing sqsh_layer image files..."
    for l in $imgdir/${layers//:/.sqsh $imgdir/}.sqsh; do
        if [ -f $l ]; then
            # copy it
            $rsync $l /sysroot/zroot/sqsh/
        elif [ -f ${l}SPLIT00 ]; then
            echo "reconstructing $(basename $l) from $(echo $(basename -a ${l}SPLIT[0-9][0-9]))..."
            # reconstruct into image dir
            target=/sysroot/zroot/sqsh/$(basename $l)
            cat ${l}SPLIT[0-9][0-9] > $target
            # match timestamp w/ the 00 file
            touch -r ${l}SPLIT00 $target
        else
            # missing image file...
            echo "ERROR: missing required image file: $l"
            return -1
        fi
    done

    # efibootmgr
    if [ -n "$can_efi" ]; then
        kernelversion=$(basename /tmproot/vmlinuz*)
        echo "kernelversion: $kernelversion"
        kernelversion=${kernelversion//vmlinuz-/}
        echo "kernelversion: $kernelversion"
        bootnum=1
        # install boot files in ESP
        for d in $espdisks; do
            if [ $bootnum -gt 1 ]; then
                esp_label="ESP$bootnum"
            else
                esp_label="ESP"
            fi
            echo "preparing $esp_label $d..."
            mkfs.vfat -n $esp_label $d
            mount $d /boot
            # install kernel files
            echo "installing kernel files..."
            $rsync /tmproot/System.map* /tmproot/vmlinuz* /tmproot/initrd* /tmproot/config* /boot/
            if [ -f /tmproot/fw.sqsh ]; then
                $rsync /tmproot/fw.sqsh /boot/
            fi
            # install syslinux files
            echo "installing syslinux files..."
            mkdir -p /boot/EFI/$efidir
            # FIXME: historically, I've just installed chain.c32, ldlinux.e64,
            #        libcom32.c32, libutil.c32, mboot.c32, menu.c32,
            #        syslinux.efi, and vesamenu.c32... (and i'm pretty sure
            #        vesamenu and mboot don't work for EFI, only BIOS) but just
            #        copying all the files sure is easier.  let's see what
            #        happens.
            #
            $rsync /usr/share/syslinux/efi64/* /boot/EFI/$efidir/
            if [ "$can_efi" = "default" ]; then
                mv -v /boot/EFI/$efidir/syslinux.efi /boot/EFI/$efidir/bootx64.efi
            fi
            # FIXME: i know a lot of this doesn't work... the color stuff, in
            #        paticular.  Should test and remove things that have no
            #        effect.
            #
            # FIXME: Should i attempt to create machine-specific fw.sqsh w/
            #        firmwarenator in here?
            #
            #        how about yes?
            #
            #        we could put the giant fw.sqsh file on the installer
            #        thumbdrive... but i seem to recall that it's become too
            #        large to use, at least during boot.  it's a bit of a
            #        chicken-and-the-egg problem then.  perhaps i need to make
            #        sure firmwarenator notes failed fw load messages as well
            #        as sucessful ones and then i can scarf all required
            #        firmware from the giant fw.sqsh on the root of the thumb
            #        drive (but don't boot the installer with fwdev=)
            #
            # FIXME: Also, what about the "default" place for EFI bootloaders?
            #        So we don't have to poke the system's EFI setup for
            #        bootable thumb drives and the like?
            #
            #        esp/EFI/syslinux/* -> esp/EFI/BOOT/*
            #        esp/EFI/syslinux/syslinux.efi -> esp/EFI/BOOT/bootx64.efi
            #
            #        My laptop refuses to boot from esp/EFI/BOOT unless I
            #        specifically add via efibootmgr... maybe I did it wrong?
            #
            #        Both the latest Ubuntu installer and the latest clonezilla
            #        ISO have /EFI/boot/bootx64.efi... given that ESP is
            #        supposed to be vfat, I can't imagine the capitalization
            #        really matters... but it *IS* different.
            #
            # FIXME: get the variables set for this... $esplabels?
            #
            # FIXME: this config file's handling of fwdev= is assuming we can
            #        specify a list of possible devices... not sure i acutally
            #        ever implemented that.
            #
            cat > /boot/EFI/$efidir/syslinux.cfg <<EOF
default menu.c32
timeout 50

menu title RuckusRD is your daddy!
menu rows 5
menu passwordrow 4
menu tabmsgrow 11
menu cmdlinerow 11
menu timeoutrow 13
menu endrow 17
menu color border 0 #ffffffff #00000000
menu color sel 7 #ffffffff #ffd09000
menu color title 0 #ffffffff #00000000
menu color tabmsg 0 #ffffffff #00000000
menu color unsel 0 #ffffffff #00000000
menu color hotsel 0 #ff000000 #ffffffff
menu color hotkey 7 #ffffffff #ff000000
menu color timeout_msg 0 #ffffffff #00000000
menu color timeout 0 #ffffffff #00000000
menu color cmdline 0 #ffffffff #00000000
menu hidden
menu hiddenrow 5
menu autoboot "Booting default in # second{,s}..."


label ruckus
 menu label Source Ruckus Linux
 linux /vmlinuz-$kernelversion
 append initrd=/initrd-$kernelversion.img root=ZFS=zroot/root sqsh_layerdev=ZFS=zroot/sqsh sqsh_layers=$layers ro consoleblank=300 fwdev=LABEL=$esplabels quiet
 menu default

EOF

            # update fstab
            eval $(blkid $d -o export)
            if [ $bootnum -gt 1 ]; then
                echo "UUID=$UUID /boot$bootnum vfat defaults 1 1" >> /tmp/fstab
            else
                echo "UUID=$UUID /boot vfat defaults 1 1" >> /tmp/fstab
            fi
            bootnum=$((bootnum+1))

            # add boot entry to EFI
            #
            # NOTE: We do this for EACH ESP to make sure the system is bootable
            #       even if the primary boot disk fails.
            #
            # NOTE: from my ancient notes:
            #
            #       efibootmgr --v -c -d /dev/sda -p 1 -l /EFI/syslinux/syslinux.efi -L syslinux
            #       efibootmgr --v -c -d /dev/sda -p 1 -l /xen-4.11.1.efi -L xen
            #
            # FIXME: can i, do i need to, specify a bootnum?  similarly, i
            #        should probably reorder the boot list... yes?  what if i
            #        specify a bootnum that's already in use?  Could try -b a1,
            #        a2, a3, etc, in the hopes they're not taken
            #
            if [ "$can_efi" != "default" ]; then
                go="efibootmgr -v -c"
                go="$go -d $(echo $d | sed 's|[0-9]*$||')"
                go="$go -p $(echo $d | grep -o '[0-9]*$')"
                go="$go -l /EFI/$efidir/syslinux.efi -L syslinux"
                [ $bootnum -gt 1 ] && go="$go$bootnum"
                decho $go
                eval $go || echo "WARNING: efibootmgr failed"
            fi

            # umount esp
            umount /boot
            echo "done with $d"
        done
    fi

    # create fstab
    #
    # NOTE: This file gets installed in the upper layer of our eventual
    #       overlayfs mount.
    #
    zfs mount zroot/root
    mkdir -p /sysroot/zroot/root/upper/upper/etc
    # start w/ /etc/fstab from base image
    base=$(echo $layers | awk -F: '{print $NF}').sqsh
    unsquashfs -cat /sysroot/zroot/sqsh/$base etc/fstab > /sysroot/zroot/root/upper/upper/etc/fstab
    # add our generated additions (e.g., swap, boot)
    cat /tmp/fstab >> /sysroot/zroot/root/upper/upper/etc/fstab
    # add virtual filesystems from our initramfs
    echo "" >> /sysroot/zroot/root/upper/upper/etc/fstab
    cat /etc/fstab >> /sysroot/zroot/root/upper/upper/etc/fstab

    # ensure /boot mountpoint(s) exist
    for x in $(awk '{if ($2 ~ "/boot") {print $2}}' /tmp/fstab); do
        mkdir -p /sysroot/zroot/root/upper/upper/$x
    done

    # we don't really even have to assemble and mount sysroot...  just boot up
    # `firstboot` and the initial system groom will happen.
    #
    # FIXME: well, that's certainly an argument for `firstboot` being on by
    #        default... perhaps i should do that and ada a `nofirstboot` flag.
    #
}


system_installer()
{
    dlg_welcome
    [ -n "$KEEP_GOING" ] || user_abort

    parse_boot_params $*

    # further parse initramsys-installer config
    imgdev=
    imgdir=images
    efidir=syslinux
    espsize=1G
    opts=${initramsys_installer_conf//,/ }
    for o in $opts; do
        case "$o" in
            IMGDEV=*)
                imgdev=${o#IMGDEV=}
                ;;
            IMGDIR=*)
                imgdir=${o#IMGDIR=}
                ;;
            EFI=*)
                can_efi=${o#EFI=}
                if [ "$can_efi" = "default" ]; then
                    efidir="boot"
                fi
                ;;
            SWAP=*)
                swap=${o#SWAP=}
                if [ "$swap" != "0" ]; then
                    want_swap=y
                else
                    want_swap=
                fi
                ;;
            ESP=*)
                espsize=${o#ESP=}
                ;;
            *)
                decho "ignoring invalid initramsys_installer config option $o"
                ;;
        esac
    done

    # resolve device name(s) - this will give us real_{devstring} and
    # {devstring}fstype
    #
    # NOTE: We explicitly lookup and supply fstype to mount calls below because
    #       relying on autodetection via mount command relies on filesystem
    #       modules already being loaded (e.g., is9660).
    #
    special_device_lookup rootdev $root
    decho "real_rootdev: $real_rootdev"
    decho "rootdevfstype: $rootdevfstype"
    if [ -n "$imgdev" ]; then
        special_device_lookup imgdev $imgdev
        decho "real_imgdev: $real_imgdev"
        decho "imgdevfstype: $imgdevfstype"
    fi

    # mount rootdev (if not already mounted)
    #
    # NOTE: Contains kernel files, boot files, and images unless imgdev
    #       specified
    #
    if ! (grep -q "^$real_rootdev /tmproot" /proc/mounts); then
        mkdir -p /tmproot
        # check to see if device is already mounted somewhere else (e.g.,
        # /fwdir), and use mount --bind if it is
        prevmp=$(grep "^$real_rootdev" /proc/mounts | awk '{print $2}')
        if [ -n "$prevmp" ]; then
            mount --bind $prevmp /tmproot
        else
            mount="mount"
            [ -n "$rootdevfstype" ] && mount="$mount -t $rootdevfstype"
            $mount $real_rootdev /tmproot
        fi
    fi

    # mount imgdev (if not already mounted)
    if [ -n "$real_imgdev" ] && ! (grep -q "^$real_imgdev /img" /proc/mounts); then
        mkdir -p /img
        # check to see if device is already mounted somewhere else (e.g.,
        # /fwdir), and use mount --bind if it is
        prevmp=$(grep "^$real_imgdev" /proc/mounts | awk '{print $2}')
        if [ -n "$prevmp" ]; then
            mount --bind $prevmp /img
        else
            mount="mount"
            [ -n "$imgdevfstype" ] && mount="$mount -t $imgdevfstype"
            $mount $real_imgdev /img
        fi
    fi

    # set imgdir to absolute path to our images
    if [ -n "$real_imgdev" ]; then
        imgdir="/img/$imgdir"
    else
        imgdir=/tmproot/$imgdir
    fi

    # locate images
    #
    # NOTE: The *.sqshSPLIT[0-9][0-9] files are created during ISO creation to
    #       workaround max file size limitations.  During installation we'll
    #       reassemble the pieces.
    #
    imgs=
    pushd $imgdir
    for x in *.sqsh *.sqshSPLIT[0-9][0-9]; do
        # check to see if glob matches any actual files
        [ -f $x ] && imgs="$imgs $x"
    done
    popd
    # now prune out the SPLIT files, removing duplicates
    imgs=$(echo $imgs | sed 's|SPLIT[0-9][0-9]||g' | tr ' ' '\n' | sort -u)
    decho "found imgs: $imgs"

    # load conf for images
    #
    # NOTE: This file, created during sourceruckus-deb build, describes the
    #       built sqsh images, and the dependencies between them.
    #
    sqshconf=$imgdir/sqsh_layers.conf
    [ -f $sqshconf ] && . $sqshconf

    # prompt for uppermost layer
    dlg_pick_top_layer $imgs
    [ -n "$KEEP_GOING" ] || user_abort

    decho "TOP_LAYER: $TOP_LAYER"
    layers=${TOP_LAYER//.sqsh/}_layers
    layers=${layers//-/_}
    layers=$(eval echo \$$layers)
    decho "layers: $layers"

    # prompt for auto or manual configuration
    #
    # FIXME: implement this.  until then, we just run auto_install
    auto_install

    # NOTE: It's convenient to have the sysroot left mounted at this
    #       point... so we leave it... revisit if that causes problems.
    #
    echo "installation complete!"
}


if [ -z "$JUST_SOURCE" ]; then
    # exit immediately if a command fails
    #
    # NOTE: We will have to be careful handling exit codes from the dialogs,
    #       which return non-zero depending on what the user selects.
    #
    trap "emergency_shell" 0 2
    set -e

    # When invoked via init, we want to run once, and then give way to a normal
    # tty.  This is accomplished by checking for the arg `once`, then if our
    # .aleady_done file is present, we just exec the remaining args.  This way
    # we can put something like this in inittab:
    #
    # tty1::respawn:/sbin/system_installer once sbin/getty 115200 tty1
    #
    if [ "$1" = "once" ]; then
        shift
        if [ -f $ALREADY_DONE ]; then
            exec $*
        fi
        go="touch $ALREADY_DONE"
        decho $go
        eval $go

        # We also want to sleep for a moment, so that kernel messages
        # finish printing out on the console before we put a dialog up.
        #
        # FIXME: hmm... there doesn't seem to be a magic number of seconds
        #        to sleep to consistently fix this.  3 works sometimes, but
        #        that's starting to get a little rediculous.  I suppose we
        #        can just run with `quiet` to avoid console output.
        #
        #sleep 3

        system_installer
    else
        # missing `once` should mean we're running by hand on the command line,
        # in which case let's pass $* along so we can override /proc/cmdline
        system_installer $*
    fi
    trap 0 2
fi


# FIXME: if we're setting things up to use zfs, we should probably apt install
#        zfs and zfs-auto-snapshot if not already included in the selected sqsh
#        image...
