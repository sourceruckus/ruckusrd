#!/bin/bash
#
# RuckusRD - a super awesome, yet simple, mkinitrd replacement
#
# Copyright 2012-2021 Michael D Labriola <michael.d.labriola@gmail.com>
#
# Licensed under the GPLv3. See the file COPYING for details. 
#
# This script is a utility for creating a ucode.img file containing the correct
# microcode for the host system.
#


decho()
{
    if [ -n "$verbose" ]; then
        echo "$*"
    fi
}


usage()
{
    if [ -n "$*" ]; then
        echo ERROR: $*
        echo
    fi
    echo "$(basename $0) - magical creator of ucode.img and narwhals"
    echo "Copyright (C) 2012-2021 Michael D Labriola <michael.d.labriola@gmail.com>"
    echo
    echo "usage: `basename $0` IMGNAME"
}


# call getopt
#
# NOTE: This handles spacing out arguments correctly for the case statement
#       below and checks for unknown flags.  Required flags are checked for
#       below.
#
# NOTE: The set -- command causes the resulting output of getopt to replace the
#       current positional arguments (e.g, $1, $2).
#
__opts=$(getopt -un $(basename $0) \
    -o hv \
    --long help,verbose -- $@)
if [ $? != 0 ]; then
    echo
    usage
    exit 1
fi
set -- $__opts

# defaults
verbose=

# parse the new positional arguments
while true; do
    case "$1" in
        -v|--verbose)
            verbose=yes
            shift
            ;;
	--)
            # done parsing
            shift
            break
            ;;
	*)
            usage
            exit 1
            ;;
    esac
done

# check for required options
if [ -z "$1" ]; then
    usage "IMGNAME required"
    exit 1
fi
filename=$(realpath $1)

decho filename: $filename
decho verbose: $verbose

if [ -n "$verbose" ]; then
    cp="cp -v"
    cpio="cpio --verbose"
    mkdir="mkdir -v"
else
    cp="cp"
    cpio="cpio"
    mkdir="mkdir"
fi

tmpdir=$(mktemp -dt $(basename $0)-XXXX)
decho tmpdir: $tmpdir
cd $tmpdir

# NOTE: How do we detect which microcode files to include?  as usual, LFS to
#       the rescue:
#
#       http://www.linuxfromscratch.org/blfs/view/svn/postlfs/firmware.html
#

# look at /proc/cpuinfo cpu family, model, and stepping (all in decimal but
# needed in hex)
eval $(cat /proc/cpuinfo | awk '{if ($1=="processor" && $3==1) exit; \
    if ($0~"^vendor_id[[:space:]]*:") printf "vendor_id=%s\n", $NF; \
    if ($0~"^cpu family[[:space:]]*:") printf "cpu_family=%s\n", $NF; \
    if ($0~"^model[[:space:]]*:") printf "cpu_model=%s\n", $NF; \
    if ($0~"^stepping[[:space:]]*:") printf "cpu_stepping=%s\n", $NF; \
    }')
cpu_family=$(printf "%x" $cpu_family)
cpu_model=$(printf "%x" $cpu_model)
cpu_stepping=$(printf "%x" $cpu_stepping)
decho vendor_id: $vendor_id
decho cpu_family: $cpu_family
decho cpu_model: $cpu_model
decho cpu_stepping: $cpu_stepping

UCODEBASEDIR=/lib/firmware
DESTDIR=$tmpdir/kernel/x86/microcode
$mkdir -p $DESTDIR
case $vendor_id in
    GenuineIntel)
        # Intel - XX-YY-ZZ is family, model, and stepping all converted into
        # hex.
        UCODEDIR=$UCODEBASEDIR/intel-ucode
        decho UCODEDIR: $UCODEDIR
        UCODE=$UCODEDIR/$cpu_family-$cpu_model-$cpu_stepping
        decho UCODE: $UCODE
        if [ -f $UCODE ]; then
            $cp -a $UCODE $DESTDIR/GenuineIntel.bin
        fi
        ;;
    AuthenticAMD)
        # AMD - just uses family, again in hex.  Families 10h to 14h (16 to 20)
        # are in microcode_amd.bin. Families 15h, 16h and 17h have their own
        # containers.
        UCODEDIR=$UCODEBASEDIR/amd-ucode
        decho UCODEDIR: $UCODEDIR
        case $cpu_family in
            10|11|12|13|14)
                UCODE=$UCODEDIR/microcode_amd.bin
                ;;
            *)
                UCODE=$UCODEDIR/microcode_amd_fam${cpu_family}h.bin
                ;;
        esac
        decho UCODE: $UCODE
        if [ -f $UCODE ]; then
            $cp -a $UCODE $DESTDIR/AuthenticAMD.bin
        fi
        ;;
    *)
        echo "ERROR: Unsupported CPU Vendor ID: $vendor_id"
        exit 1
esac

find . | $cpio -o -H newc > $filename

rm -rf $tmpdir
