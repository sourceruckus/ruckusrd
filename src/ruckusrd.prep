#!/bin/bash
#
# Copyright 2012-2025 Michael D Labriola <veggiemike@sourceruckus.org>
#
# Licensed under the GPLv3. See the file COPYING for details. 
#
# This script should get executed by the build system to create lower.sqsh,
# which should get installed by the install target.

. ruckusrd.sh

# make sure we're starting clean
rm -rf initramfs initramfs.cpio.xz

# Make directory structure
#
# NOTE: We're just going to create bin and ceate sbin as a compatability
#       symlink if it doesn't exist later on in case something explicitly calls
#       somethings from /sbin (e.g., /sbin/modprobe).
#
# NOTE: Same goes for /usr/bin, /usr/sbin, and /usr/lib.
#
echo '********** MAKING DIRECTORIES **************************************************'
mkdir -vp initramfs/{bin,dev,sys,proc,usr,run,sysroot,etc,lib} || exit 1
#
# NOTE: These other dirs aren't really needed for a normal initramfs, but we
#       add them to be more in-line with the Filesystem Hierarchy Standard,
#       mostly so that things will "just work" in `initramsys` and `maint`
#       shells.
#
mkdir -vp initramfs/{boot,home,mnt,opt,srv} || exit 1
mkdir -vp initramfs/etc/{opt,sysconfig} || exit 1
mkdir -vp initramfs/lib/firmware || exit 1
mkdir -vp initramfs/media/{floppy,cdrom} || exit 1
mkdir -vp initramfs/usr/{,local/}{include,src} || exit 1
mkdir -vp initramfs/usr/local/{bin,lib,sbin} || exit 1
mkdir -vp initramfs/usr/{,local/}share/{color,dict,doc,info,locale,man} || exit 1
mkdir -vp initramfs/usr/{,local/}share/{misc,terminfo,zoneinfo} || exit 1
mkdir -vp initramfs/usr/{,local/}share/man/man{1..8} || exit 1
mkdir -vp initramfs/var/{cache,local,log,mail,opt,spool} || exit 1
mkdir -vp initramfs/var/lib/{color,misc,locate} || exit 1
mkdir -vp initramfs/run/lock || exit 1
ln -sfv /run initramfs/var/run || exit 1
ln -sfv /run/lock initramfs/var/lock || exit 1
install -dv -m 0750 initramfs/root || exit 1
install -dv -m 1777 initramfs/tmp initramfs/var/tmp || exit 1


# Make a couple symlinks
echo '********** MAKING SYMLINKS *****************************************************'
ln -vs bin initramfs/sbin &&
ln -vs ../bin initramfs/usr/bin &&
ln -vs ../sbin initramfs/usr/sbin &&
ln -vs ../lib initramfs/usr/lib &&
ln -vs ../lib64 initramfs/usr/lib64 &&
# Fixup lib vs lib64
#
# NOTE: We symlink lib64->lib here to ensure that our runtime linker works on
#       x86, x86_64 multilib, and pure64.  There does exist the possibility
#       that we're copying in binaries with conflicting runtime libs, though
#       (e.g., say mdadm is 32bit on host system, it will put the 32bit
#       libc.so.6 in /lib which will break all the 64bi binaries...).
#
ln -vs lib initramfs/lib64 || exit 1


# Copy all the PROGS into the initramfs
echo '********** COPYING PROGS TO INITRAMFS ******************************************'
for x in ../subprojects/{busybox,util-linux,eudev,mdadm,lvm2,e2fsprogs,squashfs-tools,zfs,syslinux,dropbear,rsync,efibootmgr,groff,zstd,less,fsarchiver,newt,firmwarenator,microcodenator}.tar; do
    # NOTE: We use --keep-old-files here to prevent replacement of
    #       usr/{bin,sbin,lib,lib64} symlnks.  It would be nice if we could
    #       find a better way to do that, while allowing us to overwrite
    #       busybox symlinks.  Until then, we'll untar busybox last and tweak
    #       it's build to remove unneeded symlinks.
    tar -C initramfs --keep-old-files -vxf $x || exit 1
done


# Copy all required shared libs
echo '********** COPYING NEEDED LIBS TO INITRAMFS ************************************'
DEPLIBS=$(LD_LIBRARY_PATH=initramfs/lib find initramfs -type f -exec ldd {} 2>/dev/null \; \
    | sed 's|.*=>||g' | awk '/\// { print $1 }' | sort | uniq)
#
# NOTE: Deref symlinks, otherwise we'll end up with a bunch of broken symlinks
#       instead of actual libraries for every single lib.
#
# NOTE: At least on Ubuntu 18.04, libgcc_s.so is needed at runtime by
#       mksquashfs (so it can pthread_cancel) on the initramfs, but nothing
#       explicitly links against it so it's left out here...
#
# NOTE: Same situation for Glibc's NSS runtime shared libs.  Gotta grab them.
#
for f in $DEPLIBS; do
    if [ ! -f initramfs/lib/$(basename $f) ]; then
        cp -va --dereference $f initramfs/lib/ || exit 1
    fi
    # grab ligbcc_s.so if it exists in the same dir as libpthread.so
    if (echo $f | grep -q libpthread); then
        gcc_s=$(dirname $f)/libgcc_s.so.*
        echo GCC_S: $gcc_s
        if [ -n "$gcc_s" ]; then
            cp -va --dereference $gcc_s initramfs/lib/ || exit 1
        fi
    fi
    # grab all the nss libs if they exist in the same dir as libc.so
    if (echo $f | grep -q libc.so); then
        nss=$(dirname $f)/libnss*.so.*
        echo NSS: $nss
        if [ -n "$nss" ]; then
            cp -va --dereference $nss initramfs/lib/ || exit 1
        fi
    fi
done


# Pull in any needed support files for required libs
#
# NOTE: We need /lib/terminfo for functional libtinfo and libncurses usage at
#       the very least.
#
echo '********** COPYING NEEDED SUPPORT FILES ****************************************'
if [ -d /lib/terminfo ]; then
    go="cp -va /lib/terminfo initramfs/lib/"
elif [ -d /usr/share/terminfo ]; then
    go="cp -va /usr/share/terminfo initramfs/lib/"
else
    echo "No terminfo files in /lib or /usr/share?"
    exit 1
fi
echo $go
eval $go || exit 1


# Remove static libs
echo '********** REMOVING UNNEEDED FILES *********************************************'
go="find initramfs \( -type f -a -name \*.h \) -exec rm -v --interactive=never {} \;"
echo $go
eval $go
go="find initramfs \( -type f -a -name \*.a \) -exec rm -v --interactive=never {} \;"
echo $go
eval $go
go="find initramfs \( -type f -a -name \*.la \) -exec rm -v --interactive=never {} \;"
echo $go
eval $go


# Strip debug info
#
# NOTE: We have to chmod a couple files to allow strip to work.  We re-chmod to
#       original settings afterwards.
#
echo '********** STRIPPING UNNEEDED SYMBOLS FROM IMAGE *******************************'
chmod +w initramfs/bin/{dmsetup,lvm} initramfs/lib/libdevmapper.so.*
go="find initramfs \( -type f -a -perm /111 \) -exec strip --strip-unneeded {} \;"
echo $go
eval $go
chmod -w initramfs/bin/{dmsetup,lvm} initramfs/lib/libdevmapper.so.*


# Uncompress manpages
#
# NOTE: The entire nitramfs is compressed, so we uncompress compressed files
#       here.
#
echo '********** UNCOMPRESSING FILES (because entire initramfs gets compressed) ******'
go="find initramfs \( -type f -a -name \*.gz \) -exec gunzip -v {} \;"
echo $go
eval $go
go="find initramfs \( -type f -a -name \*.xz \) -exec unxz -v {} \;"
echo $go
eval $go


# Copy modprobe.conf and friends over
#
# NOTE: For a while, we did not do this, in an effor to keep the initrd as
#       generic as possible.  However, now that we're loading potentually tons
#       of modules via udev during initrd stage, we probably want to do this.
#       Otherwise, carefully written distro modprobe.conf files will have no
#       effect.  For the record, my review of the Ubuntu 18.04 and 20.04
#       modprobe configs makes it look like mostly generic blacklisting of
#       known problem modules (e.g., old modules that have been replaced by new
#       drivers but the old one is still around).
#
echo '********** COPYING HOST SYSTEM MODPROBE CONFIG *********************************'
if [ -e /etc/modprobe.conf ] ; then
    go="cp -vL /etc/modprobe.conf initramfs/etc"
    echo $go
    eval $go
fi
if [ -d /etc/modprobe.d ]; then
    go="cp -vLR /etc/modprobe.d initramfs/etc"
    echo $go
    eval $go
fi

# Write fstab
#
# NOTE: This is done so the initramfs can just do a mount -a to get all the
#       virtual filesystems mounted.  There is no / entry, because initramfs.
#
echo '********** GENERATING FSTAB ****************************************************'
cat > initramfs/etc/fstab <<EOF
devpts     /dev/pts  devpts  gid=5,mode=620    0 0
tmpfs      /dev/shm  tmpfs   defaults          0 0
proc       /proc     proc    defaults          0 0
sysfs      /sys      sysfs   defaults          0 0
tmpfs      /tmp      tmpfs   defaults          0 0
EOF


# Create hosts file
echo '********** GENERATING HOSTS ****************************************************'
cat > initramfs/etc/hosts << EOF
127.0.0.1  localhost
::1        localhost
EOF


# Create passwd and group
#
# NOTE: We can't login via getty or ssh if we don't at least define a
#       passwordless root account.
#
echo '********** GENERATING PASSWD/GROUP *********************************************'
cat > initramfs/etc/shells <<EOF
/bin/ash
/bin/bash
EOF
cat > initramfs/etc/passwd <<EOF
root::0:0:root:/root:/bin/ash
bin:x:1:1:bin:/bin:/bin/false
daemon:x:2:6:daemon:/sbin:/bin/false
ruckus::1000:1000:RuckusRD User:/home/ruckus:/bin/ash
nobody:x:65534:65533:Unprivileged User:/dev/null:/bin/false
EOF
cat > initramfs/etc/group <<EOF
root:x:0:
bin:x:1:
sys:x:2:
kmem:x:3:
tape:x:4:
tty:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
adm:x:16:
console:x:17:
cdrw:x:18:
mail:x:30:
news:x:31:
wheel:x:39:
users:x:1000:
nogroup:x:65533:
EOF
chmod -v 644 initramfs/etc/{passwd,group} || exit 1
mkdir -p initramfs/home/ruckus || exit 1


echo '********** GENERATING ISSUE and MOTD *******************************************'
echo -e "\e[1;37mRuckusRD Maintenance System\e[00m" > initramfs/etc/issue
cat >> initramfs/etc/issue <<"EOF"
\n (\s \m \r)
tty: \l

login as `root` or `ruckus` (unprivileged)

EOF
cat > initramfs/etc/motd <<"EOF"

You can use the following special scripts for sysroot maintenance:

 - mount_sysroot - assemble and mount /sysroot per kernel command line
 - mount_sysroot_vfs - mount /sysroot and virtual filesystems needed for chroot
 - umount_sysroot - unmount it all

Or to install on blank drive(s):

 - system_installer - dialog-based installer

EOF


echo '********** GENERATING .PROFILE FILES *******************************************'
cat > initramfs/root/.profile <<"EOF"
# -*- mode: sh -*-

PS1='\u:\w\$ '

# FIXME: Might want to consider en_US.UTF-8
#
LC_ALL=POSIX

# technically, we've got all the bins and sbins symlinked to /bin in the
# initramfs... but here's a normal looking PATH variable just to be hopefully
# less confusing
PATH=/usr/sbin:/usr/bin:/sbin:/bin
PATH=/usr/local/bin:/usr/local/sbin:$PATH

export LC_ALL PATH PS1

alias ls='ls -FC --color'
alias ll='ls -l'
alias lla='ls -la'

alias h='history'
alias less='less -MR'

export PAGER='less -MR'
EOF
cp initramfs/root/.profile initramfs/home/ruckus/ || exit 1


# Populate /var/log lastlog files
#
# NOTE: Some files, like /var/log/lastlog, need to have ownership
#       modified... but we can't do that here (unless we're running as root),
#       so we do that later on inside linuxrc.
#
echo '********** GENERATING LASTLOG FILES ********************************************'
touch initramfs/var/log/{btmp,lastlog,faillog,wtmp} || exit 1
chmod -v 664  initramfs/var/log/lastlog || exit 1
chmod -v 600  initramfs/var/log/btmp || exit 1


# Write inittab
#
# NOTE: This is only needed for the `initramsys` embedded system
echo '********** GENERATING INITTAB **************************************************'
cat > initramfs/etc/inittab <<EOF
# NOTE: Normally, rcS would mount virtual filesystems, prepopulate /dev, start
#       udev, etc.  This is all done elsewhere inside linuxrc, so we don't even
#       call an rcS script.
#
#::sysinit:/etc/init.d/rcS

# /sbin/getty invocations for selected ttys
#
# NOTE: The baud rate specified for "regular" ttys has no effect.
#
# NOTE: We specify vt220 for the serial consoles because that's what Ubuntu was
#       doing that last time I checked, and it seems to work just fine.
#       Likewise, we don't specify a terminal type for "regular" ttys because I
#       never have and I've never had problems.
#
# NOTE: The serial and Xen console ttys get uncommented if the devices are
#       present just prior to handing things off to init.
#
# 1st serial port
#ttyS0::respawn:/sbin/getty 115200 ttyS0 vt220
#
# Xen console
#hvc0::respawn:/sbin/getty 115200 hvc0 vt220
#
# regular ttys
tty1::respawn:/sbin/getty 115200 tty1
tty2::respawn:/sbin/getty 115200 tty2
tty3::respawn:/sbin/getty 115200 tty3
tty4::respawn:/sbin/getty 115200 tty4
tty5::respawn:/sbin/getty 115200 tty5
tty6::respawn:/sbin/getty 115200 tty6

# Stuff to do when restarting the init process
::restart:/sbin/init

# Stuff to do before rebooting
::ctrlaltdel:/sbin/reboot
::shutdown:/bin/umount -a -r
::shutdown:/sbin/swapoff -a
EOF


# Install our initramfs init script
echo '********** COPYING LINUXRC TO INITRAMFS ****************************************'
install -vp linuxrc initramfs/init &&
install -vp firstboot_wizard initramfs/bin/ &&
install -vp mount_sysroot initramfs/bin/ &&
install -vp mount_sysroot_vfs initramfs/bin/ &&
install -vp umount_sysroot initramfs/bin/ &&
install -vp system_installer initramfs/bin/ &&
cp -va ruckusrd-common.sh initramfs/ &&
cp -va ruckusrd.sh initramfs/ || exit 1


# Make a couple extra symlinks, if needed
echo '********** MAKING CONDITIONAL SYMLINKS *****************************************'
[ ! -f initramfs/bin/bash ] && (ln -vs sh initramfs/bin/bash || exit 1)


# Bail if we've created any broken symlinks
echo '********** CHECKING FOR BROKEN SYMLINKS ****************************************'
# NOTE: Using 'find initramfs -xtype l' really only works for relative
#       links... absolute paths are being checked against the host system, not
#       the initramfs.  So we have to do it by hand with some careful path
#       manipulation.
#
# NOTE: Also, we touch /dev/null here to avoid failures with links pointing to
#       non-existent /dev/null.  We cannot create /dev/null w/out root
#       privileges, so we just create a normal file.  It will get overwritten
#       during boot.
#
touch initramfs/dev/null
links=$(find initramfs -type l)
blarg=
for l in $links; do
    t=$(readlink $l)
    #echo "$l -> $t"
    if (echo $t | grep -q "^/"); then
        #echo -n "ABSOLUTE, "
        checkit=initramfs$t
    else
        #echo -n "RELATIVE, "
        checkit=$(dirname $l)/$t
    fi
    #echo -n "checking for $checkit "
    if [ ! -e $checkit ]; then
        #echo FAILED
        blarg+=" $l"
    #else
    #    echo passed
    fi
done
if [ -n "$blarg" ]; then
    echo "ERROR: broken link(s) detected: $blarg"
    exit 1
fi


# Create initramfs.cpio.xz file
echo '********** CREATING CPIO ARCHIVE ***********************************************'
pushd initramfs &&
find . | cpio -v -o -H newc | xz -vzc --check=crc32 > ../initramfs.cpio.xz &&
popd || exit 1
