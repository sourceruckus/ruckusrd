#!/bin/bash
#
# This script should get executed by the build system to create lower.sqsh,
# which should get installed by the install target.

. ruckusrd.conf


# Make directory structure
#
# NOTE: We're just going to copy all our binaries into bin and ceate sbin as a
#       compatability symlink in case something explicitly calls somethings
#       from /sbin (e.g., /sbin/modprobe).
#
# NOTE: Same goes for /usr/bin and /usr/sbin
#
mkdir -vp initramfs/{bin,dev,sys,proc,usr,run,sysroot,etc,lib} || exit 1


# Generate a list of binaries to copy into our filesystem
#
# NOTE: We have configure check for all these binaries and substitute their
#       paths into this list.  The upside to this is that we already know
#       exactly which binaries are on the system and where they're located.
#       The downside of this is that new versions of programs installed in
#       different locations will not get pulled into the initrd, even if they
#       come first in PATH.
#
# NOTE: We're just going to copy all of these into bin.  There's really no point
#       in differentiating between /bin and /sbin in the initramfs.
PROGS=""
PROGS+=" $BUSYBOX"
PROGS+=" $MDADM"
PROGS+=" $LVM"
PROGS+=" $UDEV"


# Copy all the PROGS into the initramfs
echo '********** COPYING PROGS TO INITRAMFS ******************************************'
# NOTE: We want to deref symlinks here to make absolutely sure we're really
#       getting a binary and not just a broken symlink.
#
# FIXME: might not need to do this anymore... since we're not using host
#        binaries, we can assume some knowledge regarding symlinks...
#
cp_deref="cp -va --dereference"
for x in $PROGS; do
    cp -va $x initramfs/bin/ || exit 1
done


# Make a couple symlinks
echo '********** MAKING SYMLINKS *****************************************************'
#$ln -vs sh initramfs/bin/bash || exit 1
$ln -vs bin initramfs/sbin || exit 1
$ln -vs ../bin initramfs/usr/bin || exit 1
$ln -vs ../sbin initramfs/usr/sbin || exit 1
# Fixup lib vs lib64
#
# NOTE: We symlink lib64->lib here to ensure that our runtime linker works on
#       x86, x86_64 multilib, and pure64.  There does exist the possibility
#       that we're copying in binaries with conflicting runtime libs, though
#       (e.g., say mdadm is 32bit on host system, it will put the 32bit
#       libc.so.6 in /lib which will break all the 64bi binaries...).
#
# FIXME: at least add a check for this to warn the user...
#
# FIXME: much less of an issue w/out host system binaries... we do still have
#        to do the symlink, because our built-in binaries are probably linked
#        against host system libs that might be in either dir...
#
$ln -s lib initramfs/lib64 || exit 1


# Copy all required shared libs
echo '********** COPYING NEEDED LIBS TO INITRAMFS ************************************'
for i in initramfs/{bin,lib/udev}/*; do
    ldd $i 2>/dev/null | sed 's|.*=>||g' | awk '/\// { print $1 }' >> .tmplibs
done

DEPLIBS=`cat .tmplibs | sort -u`
rm -f .tmplibs

# NOTE: Deref symlinks, otherwise we'll end up with a bunch of broken symlinks
#       instead of actual libraries for every single lib.
for f in $DEPLIBS; do
    $cp_deref $f initramfs/lib/ || exit 1
done


# Warn if we've created any broken symlinks
echo '********** CHECKING FOR BROKEN SYMLINKS ****************************************'
go="find initramfs -xtype l -printf '%p '"
echo $go
blarg=$(eval $go)
if [ -n "$blarg" ]; then
    echo "ERROR: broken link(s) detected: $blarg"
    exit 1
fi


# Strip debug info
echo '********** STRIPPING UNNEEDED SYMBOLS FROM IMAGE *******************************'
go="find initramfs/{bin,lib} -type f -exec strip --strip-unneeded {} \;"
echo $go
eval $go


# Install our iniramfs' init script
echo '********** COPYING LINUXRC TO INITRAMFS ****************************************'
cp -va linuxrc initramfs/init &&
chmod -v a+x initramfs/init || exit 1


# FIXME: Most mkinitrd scripts I've looked at copy /etc/modprobe.conf and
#        /etc/modprobe.d from the host system to the initramfs...  My initial
#        testing indicates that this is not necesary, so I'm not going to do it.
#
# Copy modprobe.conf and friends over
#if [ -e /etc/modprobe.conf ] ; then
#    cp /etc/modprobe.conf initramfs/etc
#fi
#cp -R /etc/modprobe.d initramfs/etc


# Write fstab
cat > initramfs/etc/fstab <<EOF
/dev/root  /         auto    defaults,noatime  0 0
devpts     /dev/pts  devpts  gid=5,mode=620    0 0
tmpfs      /dev/shm  tmpfs   defaults          0 0
proc       /proc     proc    defaults          0 0
sysfs      /sys      sysfs   defaults          0 0
EOF


# Install ruckusrd.conf
cp -va ruckusrd.conf initramfs/ || exit 1

# Create sqsh file
mksquashfs initramfs lower.sqsh || exit 1
