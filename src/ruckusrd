#!/bin/bash
#
# RuckusRD - a super awesome, yet simple, mkinitrd replacement
#
# Copyright 2012-2023 Michael D Labriola <veggiemike@sourceruckus.org>
#
# Licensed under the GPLv3. See the file COPYING for details. 
#
# This script is a derivative of fedora's livecd-creator's mayflower script,
# written by David Zeuthen <davidz@redhat.com>.
#
# It's been largely rewritten (multiple times now) to be a mkinitrd replacement
# that can be used on embedded systems, flash drives, live CDs, and normal
# desktop Linux systems.  See the file README for details.


shopt -s nullglob


# assume we're in the source tree if $PWD/linuxrc exists
if [ -f $(dirname $0)/linuxrc ]; then
    LIBDIR=$(realpath $(dirname $0))
    CONFDIR=$LIBDIR
    UCODE=$LIBDIR/../subprojects/ucode.img
else
    LIBDIR=__LIBDIR__
    CONFDIR=__CONFDIR__
    UCODE=/boot/ucode.img
fi
. $LIBDIR/ruckusrd.sh
[ -f $CONFDIR/ruckusrd.conf ] && . $CONFDIR/ruckusrd.conf
[ -f ~/.ruckusrd.conf ] && . ~/.ruckusrd.conf


decho()
{
    if [ -n "$opt_verbose" ]; then
        echo "$*"
    fi
}


usage()
{
    if [ -n "$*" ]; then
        echo ERROR: $*
        echo
    fi
    echo "RuckusRD - a super awesome, yet simple, mkinitrd replacement"
    echo "Copyright (C) 2012-2023 Michael D Labriola <veggiemike@sourceruckus.org>"
    echo
    echo "usage: $(basename $0) OPTIONS <out-initrd-image> <kernel-version>"
    echo
    echo "  -h, --help                  Show this help message and exit."
    echo
    echo "  -V, --version               Show version string and exit."
    echo
    echo "  -v, --verbose               Show verbose output."
    echo
    echo "  -f, --force                 Force overwrite existing file."
    echo
    echo "  -b, --basedir BASEDIR       Use BASEDIR as prefix to all paths."
    echo
    echo "  -c, --compressor COMPMODE   Pick compressor mode.  Valid options are 'best'"
    echo "                              and 'fast'.  Default is 'fast'."
    echo
    echo "  -o, --options LINUXRCOPTS   Specifiy runtime options to pass to the linuxrc"
    echo "                              init script in the generated initramfs."
    echo
    echo "  -U, --with-ucode UCODE_IMG  Include ucode.img in generated initramfs.  Default"
    echo "                              is /boot/ucode.img"
    echo
    echo "example: $(basename $0) /boot/myinitramfs.img \`uname -r\`"
}


# FIXME: so, we need to audit this a bit... removing the tmpdir on failure
#        keeps us from littering /tmp with tons of garbage, but it also
#        prevents us from actually debugging problems.  perhaps just cleanup if
#        it's some type of user error?
#
cleanup()
{
    retcode=$1
    rm -rf $TEMPDIR
    exit $retcode
}


# call getopt
#
# NOTE: This handles spacing out arguments correctly for the case statement
#       below and checks for unknown flags.  Required flags are checked for
#       below.
#
# NOTE: The set -- command causes the resulting output of getopt to replace the
#       current positional arguments (e.g, $1, $2).
#
__opts=$(getopt -un $0 \
    -o hVvfb:c:o:U: \
    --long help,version,verbose,force,basedir,compressor,options,with-ucode -- $@)
if [ $? != 0 ]; then
    echo
    usage
    exit 1
fi
set -- $__opts

opt_allow_overwrite=
opt_verbose=
INITRAMFS_TARGET=
KERNEL=
BASEDIR="/"
COMPMODE="fast"
LINUXRC_OPTS=
while true; do
    case "$1" in
        --help)
            usage
            exit 0
            ;;
	-V|--version)
	    echo "Ruckusrd $VERSION"
	    exit 0
	    ;;
        -v|--verbose)
            opt_verbose=yes
            shift
            ;;
        -f|--force)
            opt_allow_overwrite=yes
            shift
            ;;
        -b|--basedir)
            BASEDIR=$2
            shift 2
            ;;
        -c|--compressor)
            COMPMODE=$2
            shift 2
            ;;
        -o|--options)
            LINUXRC_OPTS+=" $2"
            shift 2
            ;;
        -U|--with-ucode)
            UCODE=$2
            shift 2
            ;;
        --)
            # done parsing
            shift
            break
            ;;
        *)
            usage "invalid usage"
            exit 1
            ;;
    esac
done
INITRAMFS_TARGET=$1
KERNEL=$2

# check for required options
if [ -z "$INITRAMFS_TARGET" ] ; then
    usage output file required
    exit 1
fi
if [ -z "$KERNEL" ] ; then
    usage kernel version required
    exit 1
fi
if [ "$COMPMODE" != "best" -a "$COMPMODE" != "fast" ]; then
    usage invalid COMPMODE
    exit 1
fi

if [ -e $INITRAMFS_TARGET -a -z "$opt_allow_overwrite" ]; then
    echo "Image $INITRAMFS_TARGET already exists. Use -f to overwrite."
    exit 1
fi

decho opt_allow_overwrite: $opt_allow_overwrite
decho opt_verbose: $opt_verbose
decho INITRAMFS_TARGET: $INITRAMFS_TARGET
decho KERNEL: $KERNEL
decho BASEDIR: $BASEDIR
decho COMPMODE: $COMPMODE
decho LINUXRC_OPTS: $LINUXRC_OPTS
echo "Building an initramfs at $INITRAMFS_TARGET for kernel $KERNEL"


original_pwd=$PWD

cp="cp -a"
cpio="cpio"
mkdir="mkdir -p"
mv="mv"
xz="xz"
ln="ln"
if [ -n "$opt_verbose" ]; then
    cp+=" -v"
    mkdir+=" -v"
    mv+=" -v"
    xz+=" -v"
    ln+=" -v"
else
    cpio+=" --quiet"
fi

decho '********** PREPPING TEMPDIR ****************************************************'
# setup our working tempdir
TEMPDIR=`mktemp -dt ruckusrd-XXXX` &&
$mkdir $TEMPDIR/initramfs || cleanup 1

# populate initramfs w/ pregenerted archive
pushd >/dev/null $TEMPDIR/initramfs &&
$xz -dc $LIBDIR/initramfs.cpio.xz | $cpio --extract &&
popd >/dev/null || cleanup 1

# append runtime options to .sh file
for x in $LINUXRC_OPTS; do
    echo $x >> $TEMPDIR/initramfs/ruckusrd.sh
done
if [ -n "$opt_verbose" ]; then
    echo '********** /ruckusrd.sh ********************************************************'
    cat $TEMPDIR/initramfs/ruckusrd.sh
fi


decho '********** PREPPING INITRAMFS MODULE DIR ***************************************'
HOSTMODDIR=$(realpath -s $BASEDIR/lib/modules/$KERNEL)
decho HOSTMODDIR=$HOSTMODDIR
if [ -h $HOSTMODDIR ]; then
    HOSTMODDIR=$(realpath $HOSTMODDIR)
    decho HOSTMODDIR is a symlink pointing to $HOSTMODDIR
    DESTMODDIR=$TEMPDIR/initramfs/lib/modules/$(basename $HOSTMODDIR)
    decho DESTMODDIR=$DESTMODDIR
    $mkdir $(dirname $DESTMODDIR) || cleanup 1
    $ln -s $(basename $HOSTMODDIR) $TEMPDIR/initramfs/lib/modules/$KERNEL || cleanup 1
else
    DESTMODDIR=$TEMPDIR/initramfs/lib/modules/$KERNEL
    decho DESTMODDIR=$DESTMODDIR
    $mkdir $(dirname $DESTMODDIR) || cleanup 1
fi


decho '********** INSTALLING MODULES **************************************************'
# Copy entire modules dir over
#
# NOTE: Now that we're copying the entire tree as-is, we no longer have to
#       search for missing dependencies or rerun depmod.
#
# FIXME: maybe this shouldn't be the default behavior?  allow command line flag
#        to do subset of modules? --only-needed-modules?
#
$cp -a $(realpath $HOSTMODDIR) $DESTMODDIR || cleanup 1


# FIXME: skip this whole thing if CONFIG_TRIM_UNUSED_KSYMS=y
config=$BASEDIR/boot/config-$KERNEL
no_headers=
if [ ! -f $config ]; then
    echo "WARNING: kernel config $config missing, assuming CONFIG_TRIM_UNUSED_KSYMS unset"
else
    no_headers=$(grep CONFIG_TRIM_UNUSED_KSYMS=y $config)
fi
if [ -n "$no_headers" ]; then
    decho '********** SKIPPING HEADER INSTALLATION BECAUSE CONFIG_TRIM_UNUSED_KSYMS=y *****'
else
    decho '********** PREPPING INITRAMFS HEADER DIR ***************************************'
    HOSTHDRDIR=$(realpath -s $BASEDIR/usr/src/linux-headers-$KERNEL)
    decho HOSTHDRDIR=$HOSTHDRDIR
    if [ -h $HOSTHDRDIR ]; then
        HOSTHDRDIR=$(realpath $HOSTHDRDIR)
        decho HOSTHDRDIR is a symlink pointing to $HOSTHDRDIR
        DESTHDRDIR=$TEMPDIR/initramfs/usr/src/$(basename $HOSTHDRDIR)
        decho DESTHDRDIR=$DESTHDRDIR
        $mkdir $(dirname $DESTHDRDIR) || cleanup 1
        $ln -s $(basename $HOSTHDRDIR) $TEMPDIR/initramfs/usr/src/linux-headers-$KERNEL || cleanup 1
    else
        DESTHDRDIR=$TEMPDIR/initramfs/usr/src/linux-headers-$KERNEL
        decho DESTHDRDIR=$DESTHDRDIR
        $mkdir $(dirname $DESTHDRDIR) || cleanup 1
    fi


    decho '********** INSTALLING HEADERS **************************************************'
    # Copy headers over, too
    #
    # NOTE: This is unneeded for boot, but needed if we want to use booting our
    #       initrd as the installation method for modules and headers (e.g.,
    #       modinject).
    #
    $cp -a $HOSTHDRDIR $DESTHDRDIR || cleanup 1
fi


# Pick a compressor
decho '********** PICKING A COMPRESSOR ************************************************'
# FIXME: Tried to add lz4, but after initially thinking it worked, I can't get
#        5.4 to boot with an lz4 compressed initrd... removed it for now.
fast_list="zstd gzip xz"
best_list="xz zstd gzip"
comp_cmd=
if [ ! -f $config ]; then
    echo "WARNING: kernel config $config missing, default to gzip compression"
    comp_cmd="gzip"
else
    case $COMPMODE in
        fast)
            comp_list=$fast_list
            ;;
        best)
            comp_list=$best_list
            ;;
        *)
            echo "WARNING: invalid COMPMODE $COMPMODE, using fast"
            comp_list=$fast_list
    esac
    for comp in $comp_list; do
        # check for binary
        which $comp >/dev/null || continue
        # check kernel config
        grep -q CONFIG_RD_${comp^^}=y $config || continue
        comp_cmd="$comp"
        break
    done
fi
if [ -z "$comp_cmd" ]; then
    comp_cmd="cat"
elif [ -n "$opt_verbose" ]; then
    comp_cmd+=" -v"
fi
case ${comp_cmd%% *} in
    lz4)
        comp_cmd+=" -l"
        ;;
    xz)
        comp_cmd+=" --check=crc32"
        ;;
esac
decho "Chose compressor: $comp_cmd"


# Create the compressed image
decho '********** CREATING COMPRESSED CPIO IMAGE **************************************'
pushd >/dev/null $TEMPDIR/initramfs &&
find . | $cpio -o -H newc | $comp_cmd > ../initramfs.img &&
popd >/dev/null || cleanup 1


# Combine w/ uncompressed microcode image
if [ -f $UCODE ]; then
    decho '********** COMBINING WITH MICROCODE IMAGE **************************************'
    cat $UCODE $TEMPDIR/initramfs.img > $TEMPDIR/initramfs-final.img || cleanup 1
    if [ -n "$opt_verbose" ]; then
        ls -l $UCODE $TEMPDIR/initramfs.img $TEMPDIR/initramfs-final.img
    fi
else
    mv $TEMPDIR/initramfs.img $TEMPDIR/initramfs-final.img
    if [ -n "$opt_verbose" ]; then
        ls -l $TEMPDIR/initramfs-final.img
    fi
fi


# final rename/installation
rm -f $INITRAMFS_TARGET
$mv $TEMPDIR/initramfs-final.img $INITRAMFS_TARGET

cleanup 0
