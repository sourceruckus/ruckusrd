#!/bin/bash
#
# RuckusRD - a super awesome, yet simple, mkinitrd replacement
#
# Copyright 2012-2021 Michael D Labriola <michael.d.labriola@gmail.com>
#
# Licensed under the GPLv3. See the file COPYING for details. 
#
# This script is a derivative of fedora's livecd-creator's mayflower script,
# written by David Zeuthen <davidz@redhat.com>.
#
# It's been largely rewritten (multiple times now) to be a mkinitrd replacement
# that can be used on embedded systems, flash drives, live CDs, and normal
# desktop Linux systems.  See the file README for details.


shopt -s nullglob


# assume we're in the source tree if $PWD/linuxrc exists
if [ -f $(dirname $0)/linuxrc ]; then
    LIBEXECDIR=$(dirname $0)
    LIBDIR=$(dirname $0)
else
    LIBDIR=__LIBDIR__
fi
. $LIBDIR/ruckusrd.conf


decho()
{
    if [ "$opt_verbose" != "0" ]; then
        echo "$*"
    fi
}


usage()
{
    echo "RuckusRD v$VERSION - a super awesome, yet simple, mkinitrd replacement"
    echo "Copyright (C) 2012-2021 Michael D Labriola <michael.d.labriola@gmail.com>"
    echo
    echo "usage: $(basename $0) [--help] [--verbose] [--version] [-f] [-b basedir] [-c best|fast] <out-initrd-image> <kernel-version>"
    echo
    echo "example: $(basename $0) /boot/myinitramfs.img \`uname -r\`"
}


cleanup()
{
    retcode=$1
    rm -rf $TEMPDIR
    exit $retcode
}


opt_allow_overwrite=0
opt_verbose=0
INITRAMFS_TARGET=""
KERNEL=""
BASEDIR=""
COMPMODE="fast"
while [ $# -gt 0 ] ; do
    case $1 in
        --help)
            usage
            exit 0
            ;;
	-V|--version)
	    echo v$VERSION
	    exit 0
	    ;;
        -f)
            opt_allow_overwrite=1
            ;;
        -v|--verbose)
            opt_verbose=1
            ;;
        -b)
            BASEDIR=$2
            shift
            ;;
        -c)
            COMPMODE=$2
            shift
            ;;
        *)
            if [ -z "$INITRAMFS_TARGET" ] ; then
                INITRAMFS_TARGET=$1
            elif [ -z "$KERNEL" ] ; then
                KERNEL=$1
            else
                echo "Unknown option or parameter \"$1\""
                echo
                usage
                exit 1
            fi
            ;;
        *)
            ;;
    esac

    shift
done

if [ -z "$INITRAMFS_TARGET" -o -z "$KERNEL" ] ; then
    usage
    exit 1
fi

if [  "$opt_allow_overwrite" == "0" ] ; then
    if [ -e $INITRAMFS_TARGET ] ; then
	echo "Image $INITRAMFS_TARGET already exists. Use -f to overwrite"
	exit 1
    fi
fi

echo "Building an initramfs at $INITRAMFS_TARGET for kernel $KERNEL"


original_pwd=$PWD

cp="cp -a"
cpio="cpio"
mkdir="mkdir -p"
mv="mv"
xz="xz"
ln="ln"
if [ "$opt_verbose" != "0" ]; then
    cp+=" -v"
    mkdir+=" -v"
    mv+=" -v"
    xz+=" -v"
    ln+=" -v"
else
    cpio+=" --quiet"
fi

decho '********** PREPPING TEMPDIR ****************************************************'
# setup our working tempdir
TEMPDIR=`mktemp -dt ruckusrd-XXXX` &&
$mkdir $TEMPDIR/initramfs || cleanup 1

# populate initramfs w/ pregenerted archive
pushd >/dev/null $TEMPDIR/initramfs &&
$xz -dc $LIBDIR/initramfs.cpio.xz | $cpio --extract &&
popd >/dev/null || cleanup 1


decho '********** PREPPING INITRAMFS KERNEL DIR ***************************************'
HOSTMODDIR=$BASEDIR/lib/modules/$KERNEL
if [ -h $HOSTMODDIR ]; then
    DESTMODDIR=$TEMPDIR/initramfs/lib/modules/$(readlink $HOSTMODDIR)
    $mkdir $DESTMODDIR || cleanup 1
    $ln -s $(readlink $HOSTMODDIR) $TEMPDIR/initramfs/lib/modules/$KERNEL || cleanup 1
else
    DESTMODDIR=$TEMPDIR/initramfs/lib/modules/$KERNEL
    $mkdir $DESTMODDIR || cleanup 1
fi

# Copy modules.order, modules.builtin, and other KBuild generated files
#
# NOTE: The depmod call below updates modules.dep and relatives, which needn't
#       be copied here... but we don't bother weeding them out.
#
# FIXME: is it ok to leave modules.order full of modules that aren't being
#        included in the initramfs?
#
$cp $HOSTMODDIR/modules.* $DESTMODDIR/ || cleanup 1

# copy in boot-related kernel modules
#
# FIXME: should probably allow users to add more modules somehow, maybe a
#        command line arg or a conf file...
#
# NOTE: if we ever want to add DRM drivers as well (potentially for early KMS
#       fbcon splash screen), add drivers/gpu to the find statement below.
#
find $HOSTMODDIR/kernel/drivers/{ata,block,cdrom,md,nvme,scsi,usb,hid,net} \
    $HOSTMODDIR/kernel/{fs,net} \
    \( -name \*.ko.xz -o -name \*.ko \) \
    -exec $cp {} $DESTMODDIR/ \; 2>/dev/null

# NOTE: I was originally decompressing each .ko.xz file so that I could xz the
#       entire initramfs at the end more optimally, but that leads to kernel
#       taint w/ kernel signing turned on... so, i guess i won't do this.
#
#find $DESTMODDIR -name \*.xz -exec $xz -d {} \;


# Make sure none of the MODS we've installed have unmet dependencies
decho '********** COPYING MODULE DEPS TO INITRAMFS ************************************'
for m in $DESTMODDIR/*.ko{,.xz} ; do
    modprobe --set-version $KERNEL --show-depends $(basename ${m//.ko*/}) \
        | head --lines=-1 >> $TEMPDIR/modules 2>/dev/null
done

DEPMODS=`cat $TEMPDIR/modules | awk '/^insmod/ { print $2 }' | sort -u`
for f in $DEPMODS; do
    if [ ! -f $DESTMODDIR/$(basename $f) ]; then
        $cp $f $DESTMODDIR/ || cleanup 1
    fi
done


# Build module deps file so we can use modprobe
decho '********** RUNNING DEPMOD ******************************************************'
go="depmod -b $TEMPDIR/initramfs -v $KERNEL"
[ "$opt_verbose" != "1" ] && go+=" > /dev/null"
decho $go
eval $go || cleanup 1


# Pick a compressor
decho '********** PICKING A COMPRESSOR ************************************************'
fast_list="zstd lz4 gzip xz"
best_list="xz zstd gzip lz4"
comp_cmd=
config=$BASEDIR/boot/config-$KERNEL
if [ ! -f $config ]; then
    echo "WARNING: kernel config $config missing, default to gzip compression"
    comp_cmd="gzip"
else
    case $COMPMODE in
        fast)
            comp_list=$fast_list
            ;;
        best)
            comp_list=$best_list
            ;;
        *)
            echo "WARNING: invalid COMPMODE $COMPMODE, using fast"
            comp_list=$fast_list
    esac
    for comp in $comp_list; do
        # check for binary
        which $comp >/dev/null || continue
        # check kernel config
        grep -q CONFIG_RD_${comp^^} $config || continue
        comp_cmd="$comp"
        break
    done
fi
if [ -z "$comp_cmd" ]; then
    comp_cmd="cat"
elif [ "$opt_verbose" != 0 ]; then
    comp_cmd+=" -v"
fi
case ${comp_cmd%% *} in
    lz4)
        comp_cmd+=" -l"
        ;;
    xz)
        comp_cmd+=" --check=crc32"
        ;;
esac
echo "Chose compressor: $comp_cmd"


# Create the compressed image
decho '********** CREATING COMPRESSED CPIO IMAGE **************************************'
pushd >/dev/null $TEMPDIR/initramfs &&
find . | $cpio -o -H newc | $comp_cmd > ../initramfs.img &&
popd >/dev/null || cleanup 1

rm -f $INITRAMFS_TARGET
$mv $TEMPDIR/initramfs.img $INITRAMFS_TARGET

echo "Done; initramfs is $(du -h $INITRAMFS_TARGET | awk '{print $1}')."
echo
cleanup 0
