#!/bin/bash
#
# RuckusRD - a super awesome, yet simple, mkinitrd replacement
#
# Copyright 2020-2022 Michael D Labriola <veggiemike@sourceruckus.org>
#
# Licensed under the GPLv3. See the file COPYING for details. 
#
# This script is a utility for running a job in a disowned subprocess so the
# user can logout, then emailing status and output to the user when the job
# completes.


usage()
{
    if [ -n "$*" ]; then
        echo ERROR: $*
        echo
    fi
    echo "doit - run something in the background w/ emailed output"
    echo "Copyright (C) 2020-2022 Michael D Labriola <veggiemike@sourceruckus.org>"
    echo
    echo "usage: `basename $0` OPTIONS CMD..."
    echo
    echo "  -f, --filename LOGFILE    Specify output filename.  Both stdout and stderr"
    echo "                            will be redirected to this file.  When the process"
    echo "                            finishes, the files last few lines will contain"
    echo "                            \"DOIT: ALL DONE\", a return code, and timing stats."
    echo
    echo "  -m, --mail EMAILADDRESS   Email stdout/stderr to specified address instead"
    echo "                            of logging to a file."
}


# call getopt
#
# NOTE: This handles spacing out arguments correctly for the case statement
#       below and checks for unknown flags.  Required flags are checked for
#       below.
#
# NOTE: The set -- command causes the resulting output of getopt to replace the
#       current positional arguments (e.g, $1, $2).
#
__opts=$(getopt -un $0 \
    -o hf:m: \
    --long help,filename:,mail: -- $@)
if [ $? != 0 ]; then
    echo
    usage
    exit 1
fi
set -- $__opts


# parse the new positional arguments
while true; do
    case "$1" in
        -f|--filename)
            filename=$2
            shift 2
            ;;
	-m|--mail)
            mail=$2
            shift 2
            ;;
	--)
            # done parsing
            shift
            break
            ;;
	*)
            usage
            exit 1
            ;;
    esac
done
cmd=$*

# check for required options
if [ -z "$filename" -a -z "$mail" ]; then
    usage "--filename or --mail required"
    exit 1
elif [ -n "$filename" -a -n "$mail" ]; then
    usage "cannot do both --filename and --mail"
    exit 1
fi
if [ -z "$cmd" ]; then
    usage "CMD required"
    exit 1
fi

echo filename: $filename
echo mail: $mail
echo cmd: $cmd

go="{ time ($cmd ; echo -e \"\n\nDOIT: ALL DONE\nRET=\$?\") } 2>&1"
[ -n "$mail" ] && go+=" | mail -s \"doit $cmd [$PWD]: all done\" $mail"
[ -n "$filename" ] && go+=" | cat > $filename"
go+=" &"

echo $go
eval $go
exit 0
