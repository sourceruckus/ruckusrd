-*- mode: outline -*-

* For 1.0.0

 - fix all the FIXMEs

 - documentation (html, man)

 - Maybe revamp command-line usage?

 - Maybe add checksum verification of sqsh_layers to linuxrc?  If anything's
   been modified, make a lot of noise and don't boot.

 - Add --with-system-{busybox,e2fsprogs,eudev,lvm2,mdadm,squashfs-tools}
   configure flags.

 - Pretty sure I broke out-of-tree building at some point... need to fix that.

 - Build something into the build system to fetch submodules when building from
   dist tarball.  Right now, you can really only build the subprojects via a
   git clone.  (This means our dist tarballs are currently useless, as we don't
   yet have --with-system-whatever flags...)


* For 0.x

 - Should prefix all our non-standard kernel commandline options w/
   ruckusrd.whatever.  Once we have config-file support, we should be able to
   keep it a bit less verbose, and this will guard us against accidentally
   using the same option as something in the kernel or systemd.  A couple
   should probably stay unprefixed (e.g., root=, quiet).

 - Once we've got our initrd acting as a kernel-installer (via modinject), we
   could also add code to do the new sqsh_layer prep and have it work as a full
   blown system installer.  Assuming the user has already created an upper
   layer device and specified it as root=whatever, we could automatically do
   the following:

   1. create new /etc/hostname
   2. create new /etc/mailname
   3. sed hostname and domain into /etc/postfix/main.cf
   4. create new /etc/machine-id
   5. remove /var/log/journal/*
   6. create new /etc/fstab
   7. clean out NetworkManager connections (maybe?)
   8. dpkg-reconfigure locale, tzdata, postfix, ...?

   Of course, if we do that... it will really be distro specific.  So far, the
   things that would get tweaked are pretty generic... it might actually work
   in most distros.

   We could even go as far as creating logvol and EXT4 fs to match
   root=whatever if needed.  That would make installation via pre-existing
   squashfs image super duper trivial: 1) boot up off USB stick, pick "Install
   system" option in syslinux menu, either edit the kernel commandline to
   provide root=whatever, hostname, domainname, or add a couple prompts during
   boot.  Done.

   When installing on a blank system, we would also have to setup boot.
   Install syslinux (either for EFI or BIOS), install the kernel files, install
   the squashfs.img locally somewhere, etc.


* For 0.21

 - Consider adding `ruckusmaint` to create a maint shell using initramfs init
   (like `ruckusonly`) but with the the sysroot assembled and mounted read-only
   at /sysroot.  This gives us more functionality in our maint shell (e.g.,
   multiple ttys to work from), but would no longer continue to boot the
   sysroot on exit.

   Could alternatively add a mount_sysimage script to /bin and tell the user
   about it via /etc/motd.  (in which case, we'll want the sysroot udev rules
   after all).


* For 0.20

 - Make sure sqsh_layers=es-base.img works with root=ZFS=zroot/dude and maybe
   make sqshlayerdev=ZFS=zroot/sqsh work too?  Or at least document what
   doesn't work and clean up associated FIXMEs.

 - Add dialog to initramfs.  Then we can start playing with installer options.
   Look into dialog implementations, too, to find one that looks less terrible
   on xen console?

 - Make sure regular maint and normal bootup still work now that i've fleshed
   out `ruckusonly`

 - Test booting ruckusonly on my laptop, to make sure things work as well as
   they did when i started.

 - Test booting ruckusonly w/ fw.sqsh on flash drive... I recall the giant
   fw.sqsh not working the last time I tried to boot using it on aldarion.  Is
   it just too big?

 - Can we add microcodenator and firmwarenator to the initramfs?  Assuming we
   can get the full fw.sqsh to boot, that would be a good place to generate a
   small system-specific fw.sqsh file.  The irony... they used to be a part of
   this source tree.  ;-)


* Could happen in a stable release

 - I've added rsync and dropbear, and they both work.  However, something is
   wonky regarding uid detection in my maint shell.  Even after adding
   /etc/passwd and /etc/group (so id shows valid stuff), dropbear's call to
   either getuid() or getpwuid() in cli-runopts.c is failing.  I think this is
   forcing me to specify -i /.ssh/id_dropbear on the ssh command line to get
   key-based auth working (as well as specifying root@).

   Hmm... somewhere along the line I stopped needing to specify -i, but it's
   still complaining. odd.  Hm, it's if I login.  Adding /etc/nsswitch.conf
   doesn't help....

 - maint: less: WARNING: terminal is not fully funcitonal

   Strange, because everything else including vi seems to work fine.  Less
   source code makes makes me think there is indeed some sort of line clearing
   capability that's not working correctly...

   super annoying, especially now that we have `ruckusonly`, manpages, etc.
   It's definately just less.  Even busybox's less is working.  Need to either
   fix this or jetison less.
