-*- mode: outline -*-

* For 1.0.0

 - fix all the FIXMEs

 - documentation (html, man)

 - Maybe revamp command-line usage?

 - Maybe add checksum verification of sqsh_layers to linuxrc?  If anything's
   been modified, make a lot of noise and don't boot.

 - Add --with-system-{busybox,e2fsprogs,eudev,lvm2,mdadm,squashfs-tools}
   configure flags.

 - Pretty sure I broke out-of-tree building at some point... need to fix that.

 - Build something into the build system to fetch submodules when building from
   dist tarball.  Right now, you can really only build the subprojects via a
   git clone.  (This means our dist tarballs are currently useless, as we don't
   yet have --with-system-whatever flags...)


* For 0.x

 - Should prefix all our non-standard kernel commandline options w/
   ruckusrd.whatever.  Once we have config-file support, we should be able to
   keep it a bit less verbose, and this will guard us against accidentally
   using the same option as something in the kernel or systemd.  A couple
   should probably stay unprefixed (e.g., root=, quiet).

 - Consider adding a `ruckusonly` flag to linuxrc to invoke busybox's init
   instead of switching rootfs and invoking the normal system's init.  This
   would give us a more complete system (complete with multiple TTYs to login
   on) and opens the door for using a ruckusrd initramfs on it's own to
   facilitate installation on blank drives.

 - Once we've got our initrd acting as a kernel-installer (via modinject), we
   could also add code to do the new sqsh_layer prep and have it work as a full
   blown system installer.  Assuming the user has already created an upper
   layer device and specified it as root=whatever, we could automatically do
   the following:

   1. create new /etc/hostname
   2. create new /etc/mailname
   3. sed hostname and domain into /etc/postfix/main.cf
   4. create new /etc/machine-id
   5. remove /var/log/journal/*
   6. create new /etc/fstab
   7. clean out NetworkManager connections (maybe?)
   8. dpkg-reconfigure locale, tzdata, postfix, ...?

   Of course, if we do that... it will really be distro specific.  So far, the
   things that would get tweaked are pretty generic... it might actually work
   in most distros.

   We could even go as far as creating logvol and EXT4 fs to match
   root=whatever if needed.  That would make installation via pre-existing
   squashfs image super duper trivial: 1) boot up off USB stick, pick "Install
   system" option in syslinux menu, either edit the kernel commandline to
   provide root=whatever, hostname, domainname, or add a couple prompts during
   boot.  Done.

   When installing on a blank system, we would also have to setup boot.
   Install syslinux (either for EFI or BIOS), install the kernel files, install
   the squashfs.img locally somewhere, etc.


* For 0.19

 - Add dialog to initramfs.  Then we can start playing with installer options.

 - Tidy up linuxrc output.  Perhaps prefix each output w/ "ruckusrd: " or
   something like that to differentiate our initramfs messages from kernel
   spew?

 - Update docs with clearer instructions for ucode.img, fw.img, and fw.sqsh
   handling... it's kinda sparse and I have to read through the code every time
   I haven't touched this in a while.  /boot/ucode.img gets wrapped up into
   built initramfs images... but only if you install it.  /fw.sqsh gets loaded
   during boot if you specify FWDEV=.  Wasn't there another way to specify fw?
   Yes: fw.img can be concattenated w/ the initramfs, but that means you have
   to regenerate initramfs in order to update fw.

   Also, holy crap.  fw.sqsh from 0.18 was 287M and now in 0.19-dev it's 416M!
   That's starting to get pretty unwieldy... and firmwarenator currently
   depends on /lib/firmware being populated already (and i was doing this by
   booting once w/ full-blown fw.sqsh, which injects into /lib/firmware).  I
   suppose I could manually install new fw instead of piggy backing like that.
   So maybe stick instructions on updating /lib/firmware from our build
   fw.sqsh? unsquashfs fw.sqsh; rsync -vau squashfs-root/ /lib/firmware.  Then
   create new small /boot/fw.sqsh via firmwarenator.

   Should we just go ahead an install /boot/ucode.img?  Or install it in
   /usr/share/ruckusrd or something?

 - --no-ucode flag?  That way you can disable the auto-adding of
   /boot/ucode.img w/out having to remove it (for testing?).


* Could happen in a stable release

 - I've added rsync and dropbear, and they both work.  However, something is
   wonky regarding uid detection in my maint shell.  Even after adding
   /etc/passwd and /etc/group (so id shows valid stuff), dropbear's call to
   either getuid() or getpwuid() in cli-runopts.c is failing.  I think this is
   forcing me to specify -i /.ssh/id_dropbear on the ssh command line to get
   key-based auth working (as well as specifying root@).

   Hmm... somewhere along the line I stopped needing to specify -i, but it's
   still complaining. odd.  Hm, it's if I login.  Adding /etc/nsswitch.conf
   doesn't help....

 - maint: less: WARNING: terminal is not fully funcitonal

   Strange, because everything else including vi seems to work fine.  Less
   source code makes makes me think there is indeed some sort of line clearing
   capability that's not working correctly...
