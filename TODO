-*- mode: outline -*-

* For 1.0.0

 - fix all the FIXMEs

 - documentation (html, man)

 - Maybe revamp command-line usage?

 - Maybe add checksum verification of sqsh_layers to linuxrc?  If anything's
   been modified, make a lot of noise and don't boot.

 - Add --with-system-{busybox,e2fsprogs,eudev,lvm2,mdadm,squashfs-tools}
   configure flags.


* For 0.15

 - Add config-file support (/mnt/root-true/ruckusrd.conf?).  Retain kernel
   commandline parsing, but only needed to override what's in the config file.
   This will allow us to update config w/out needing to mess with booloader
   config.

 - Should prefix all our non-standard kernel commandline options w/
   ruckusrd.whatever.  Once we have config-file support, we should be able to
   keep it a bit less verbose, and this will guard us against accidentally
   using the same option as something in the kernel or systemd.  A couple
   should probably stay unprefixed (e.g., root=, quiet).

 - Tidy up  linuxrc output.  "quiet"  mode should  be silent to  match expected
   behavior in  most distros.  Perhaps  prefix each  output w/ "ruckusrd:  " or
   something  like that  to differentiate  our initramfs  messages from  kernel
   spew?

 - Now that initrd has ALL a kernel's modules, and rsync, make sure the rootfs
   actually has them installed and inject them if necesary.  We could actually
   rely on this as our module installation mechanism instead of having
   kernel_tar's embedded installer do it...  That would make kernel_builder
   essentially depend on the user using ruckusrd for initramfs... but it
   already does.

 - We need to get firmware loaded up during the initramfs stage of boot.  This
   is because now that we include all the kernel modules, udev will be able to
   load any module the kernel notices... and there are some that are going to
   require firmware to be present during load.

   For now, we've got the firmwarenator util that will create a fw.img file
   that can be appended to the initrd file pretty easily... but it would be
   nice if this was automaticly handled.

   Logistically annoying, but at least appending to the ruckusrd created
   initramfs sounds trivial:

   $ cat /boot/fw.img >> /boot/initrd-5.10.y.img

   That assumes that both fw.img and initrd.img use the same compressor.  If
   that's not the case, it can be remedied like this:

   $ zstdcat /boot/fw.img | gzip >> /boot/initrd-5.4.y.img

   We should have kernel_tar's installation script do that automatically if
   /boot/ruckusrd-fw.img exists.  I think we can simply use file to
   detect/correct mismatched compressors.

 - Once we've got microcodenator generating /boot/ruckusrd-ucode.img, we should
   do the same thing we're doing with firmware?  I seem to recall that ucode
   had to be the 1st thing seen by the kernel... so that might not work.


* Could happen in a stable release

 - I've added rsync and dropbear, and they both work.  However, something is
   wonky regarding uid detection in my maint shell.  Even after adding
   /etc/passwd and /etc/group (so id shows valid stuff), dropbear's call to
   either getuid() or getpwuid() in cli-runopts.c is failing.  I think this is
   forcing me to specify -i /.ssh/id_dropbear on the ssh command line to get
   key-based auth working (as well as specifying root@).

   Hmm... somewhere along the line I stopped needing to specify -i, but it's
   still complaining. odd.  Hm, it's if I login.  Adding /etc/nsswitch.conf
   doesn't help....

 - Add script to help create microcode.img.  Unlike the firmware.img
   generation, we probably can't assume that the kernel is already loading
   microcode propperly...  but really we only have 2 choiced (intel/amd) so we
   could just detect cpu type and include everything.

   Maybe we should add linux-firmware, microcode, and regulatory.db repos as
   submodules here as well?  I was originally planning on creating my own
   linux-firmware-mdl repo, with helper scripts and submodules...  but it might
   be easier to just keep everything together here under one roof.

   NOTE: Also, once we've tested this, we should go disable the deprecated
         firmware loading methods in our kernel .configs.

 - Pretty sure I broke out-of-tree building at some point... need to fix that.

 - Build something into the build system to fetch submodules when building from
   dist tarball.  Right now, you can really only build the subprojects via a
   git clone.  (This means our dist tarballs are currently useless, as we don't
   yet have --with-system-whatever flags...)
