-*- mode: outline -*-

* For 1.0.0

 - fix all the FIXMEs

 - documentation (html, man)

 - Maybe revamp command-line usage?

 - Maybe add checksum verification of sqsh_layers to linuxrc?  If anything's
   been modified, make a lot of noise and don't boot.

 - Add --with-system-{busybox,e2fsprogs,eudev,lvm2,mdadm,squashfs-tools}
   configure flags.


* For 0.15

 - Add config-file support (/mnt/root-true/ruckusrd.conf?).  Retain kernel
   commandline parsing, but only needed to override what's in the config file.
   This will allow us to update config w/out needing to mess with booloader
   config.

 - Should prefix all our non-standard kernel commandline options w/
   ruckusrd.whatever.  Once we have config-file support, we should be able to
   keep it a bit less verbose, and this will guard us against accidentally
   using the same option as something in the kernel or systemd.  A couple
   should probably stay unprefixed (e.g., root=, quiet).

 - Tidy up  linuxrc output.  "quiet"  mode should  be silent to  match expected
   behavior in  most distros.  Perhaps  prefix each  output w/ "ruckusrd:  " or
   something  like that  to differentiate  our initramfs  messages from  kernel
   spew?

 - Add support for modules-x.y.z.img and src-x.y.z.img.  The modules image
   should contain ALL the specified kernel modules.  This would make all
   modules available to initramfs (which is probably overkill), but could also
   remove the onus of installing them on each filesystem.  If present, or if
   specified via some command-line arg, the contents of /lib/modules could be
   --bind mounted over sysroot/lib/modules to remove the possibility of
   mismatching kernel modules in initramfs and sysroot filesystem.  Doing the
   same thing for kernel headers would make sense for completeness, then
   kernel_installer and kernel_tar wouldn't need to rsync /lib/modules and
   /usr/src/ any more (which should make kernel upgrades faster/easier).

   To go along with that, we should introduce a --small command line flag to
   produce a traditional-style initramfs (i.e., bare minimum for accessing the
   root device), --net for the current default of including network subsystem
   and devices drivers on the initramfs, and --full that includes all the
   modules/headers as individually extracted archives.  Default would be either
   --small or --net.

   Wait...  if we bake this right into ruckusrd (instead of tacking on extra
   files for testing), why wouldn't we just include all the modules/headers
   directly in the single initrd image we're creating?  There's really no nead
   to generate them as seperate files... even though we can.  They don't need
   to be mount-able, we're going to --bind mount them into the sysroot.

   Should we also have --passthrough (or something like that) to enable linuxrc
   code to do the bind mounting into /sysroot?  It would imply --full.

   WAIT!  There is one problem w/ --bind mount.  That's assuming that I won't
   need anything else in /lib/modules or /usr/src.  I really didn't want to
   copy into the rootfs (now we'd want rsync to avoid churn, but even then
   we've got more work to do every time we boot), but what if I want to be able
   to build an out-of-tree module against a kernel I haven't booted?  Or I want
   to inspect the modules of a different kernel?  This might require a bit more
   thought.  (as a side note, now that I have networking in initramfs, rsync
   might be a good thing to have)

   After sleeping on it a few days, I think injecting the modules, src, and
   maybe kernel/initrd/config into the rootfs sounds like the best solution.

 - What to do w/ firmware...?  If we include tons of modules in initramfs, then
   let udev load them, we're going to run into failures due to missing
   firmware.  I don't want to include TONS of firmware in initramfs (because
   huge), so I was planning on just creating machine-specific fw.img files to
   use as needed.  Multiple initramfs files can be specified to the kernel, and
   it works fine.  BUT... BUT...  I don't think I can do that for Xen.  I can't
   seem to get it to work via extlinux (BIOS, mboot, using additional ---
   sections or by specifying via initrd=) or via EFI xen.cfg (haven't tried as
   hard, but inital stab didn't work).

   If I do eventually get xen.cfg working w/ a bit more testing, that would be
   a reason to finally kick BIOS to the curb... and I guess that would be fine.
   But if I can't, then I need to either find a bootloader that can handle Xen
   and give it multiple initramfs images, or I have to start merging initramfs
   images together into a single one post-kernel-install.  yucky.

   Logistally annoying, but at least appending to the ruckusrd created
   initramfs sounds trivial:

   kernel command line:  dyndbg="func fw_get_filesystem_firmware +fmp"

   $ cp -va /boot/initrd-x.y.z{,-fw}.img
   $ mkdir t && pushd t
   $ dmesg |awk '/Loading firmware/ {print $NF}'| cpio -p --make-dir .
   $ find . | cpio -o -H newc | zstd -T0 -10 >> /boot/initrd-x.y.z-fw.img
   $ popd

   Sounds nice, and google says this should work, but doesn't seem to work for
   me... adding -a to cpio usage also doesn't work.

   Actually, that does work... for the kernel.  Doing a zstdcat | cpio
   --ectract only results in the first archive getting extracted but the kernel
   is smart enough to just keep on going I guess.  So good, that's an option.

   We could have kernel_tar's install script do that dance
   automatically... perhaps create an alternate img w/ -fw appended IF we
   detect and "Loading firmware" messages in dmesg?  We could also add a
   --fw-files flag to specify fw files to include?  Or --fw-list to specify a
   file containing a list of firmware to include?  Or --fw specifying path to
   fw.img to simply be appended?  We probably don't need to generate fw.img too
   frequently, so slurping up a pre-generated fw.img is probably the best.
   Perhaps we should just do that automagically if /boot/fw.img exists?  or
   perhaps /boot/ruckusrd-fw.img?

   FYI, if we go with the "append /boot/fw.img to installed initrd.img" method,
   it's as simple as cat /boot/fw.img >> /boot/initrd.img...  assuming both
   images use the same compressor.  I guess we could check for that easily
   enough via file.

   If we deviate behaviorally from what kernel_installer does... should we
   remove it?  I mean, I don't want to have to maintain stuff in two places,
   and there's really no point in keeping kernel_installer around.  If we do
   that, we should also consider automatically calling kernel_tar at the end of
   kernel_builder.

 - Maybe add rsync to initramfs now that we have networking there.  That'll
   almost definately need ssh (dropbear?) as well.

 - Add a ruckusrd-init flag, or something like that.  Ooh, noroot maybe.  This
   should tell the initramfs's init script to NOT switch root but to instead
   just pass controll over to busybox's init.  This way, we can do full-blown
   work from within our cool initramfs, but have the shell be able to control
   processes.

 - Add syslinux and efibootmgr to initramfs so we have all the tools necesary
   to install onto the hardware we're booting off of (e.g., bootable thumb
   drive installer).


* Could happen in a stable release

 - Add script to help create firmware.img for specific hardware.

   kernel command line:  dyndbg="func fw_get_filesystem_firmware +fmp"
   
   $ dmesg |awk '/Loading firmware/ {print $NF}'| cpio -p --make-dir .
   $ find . | cpio -o -H newc | zstd -T0 -10 > ../fw-aldarion.img

   This becomes more important now that we're putting more modules on the
   initramfs.  I already have problems with network modules on my laptop
   requiring firmware.  Any module available on the initramfs gets loaded by
   udev there instead of by the actual sysroot udev instance post-init, and if
   they need firmware, it has to be on the initramfs.

 - Add script to help create microcode.img.  Unlike the firmware.img
   generation, we probably can't assume that the kernel is already loading
   microcode propperly...  but really we only have 2 choiced (intel/amd) so we
   could just detect cpu type and include everything.

   Maybe we should add linux-firmware, microcode, and regulatory.db repos as
   submodules here as well?  I was originally planning on creating my own
   linux-firmware-mdl repo, with helper scripts and submodules...  but it might
   be easier to just keep everything together here under one roof.

   NOTE: Also, once we've tested this, we should go disable the deprecated
         firmware loading methods in our kernel .configs.

 - Pretty sure I broke out-of-tree building at some point... need to fix that.

 - Build something into the build system to fetch submodules when building from
   dist tarball.  Right now, you can really only build the subprojects via a
   git clone.  (This means our dist tarballs are currently useless, as we don't
   yet have --with-system-whatever flags...)
