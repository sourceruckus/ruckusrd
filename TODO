-*- mode: outline -*-

* For 1.0.0

 - fix all the FIXMEs

 - documentation (html, man)

 - Maybe revamp command-line usage?

 - Maybe add checksum verification of sqsh_layers to linuxrc?  If anything's
   been modified, make a lot of noise and don't boot.

 - Add --with-system-{busybox,e2fsprogs,eudev,lvm2,mdadm,squashfs-tools}
   configure flags.

 - Pretty sure I broke out-of-tree building at some point... need to fix that.

 - Build something into the build system to fetch submodules when building from
   dist tarball.  Right now, you can really only build the subprojects via a
   git clone.  (This means our dist tarballs are currently useless, as we don't
   yet have --with-system-whatever flags...)


* For 0.x

 - Should prefix all our non-standard kernel commandline options w/
   ruckusrd.whatever.  Once we have config-file support, we should be able to
   keep it a bit less verbose, and this will guard us against accidentally
   using the same option as something in the kernel or systemd.  A couple
   should probably stay unprefixed (e.g., root=, quiet).

 - Consider adding `rescue` to kick-off a dialog-based rootfs recovery of some
   sort?  Or maybe just add a /bin/rescue script to run via `initramsys` shell?

 - Udev rules to rename network interfaces like systemd, so pre-boot network
   config can actually have the right device names?

   https://systemd.io/PREDICTABLE_INTERFACE_NAMES/
   https://wiki.archlinux.org/title/Network_configuration#Change_interface_name


* proposed for 0.23

 - For long-lasting systems, constantly installing updates, doing regular work,
   etc, eventually results in essentially the entire collection of sqsh_layers
   being replaced in upper with new files.  So keeping the original sqsh_layers
   around and overlaying eventually turns into a bit of a resource (cpu and
   space) waste.

   Instead of doing sqsh-commit and sqsh-merge, the user may choose to
   "un-sqsh_layer" back into a "regular" root filesystem.  Perhaps provide
   sqsh_layers2regular and regular2sqsh_layers?

 - Sqsh_layer maintenance scripts for all the things that require rebooting.

   In particular, sqsh-commit (to create new sqsh from upper) and sqsh-merge (to
   merge all lower layers into a single sqsh).  And actually, maint might make
   more sense... since it will have all the layers mounted.  Although, if we
   want to do a full reboot after re-layering (to ensure the bootloader cfg
   changes happens before continuing), that won't work via maint, so initramsys
   would be better suited.

   Would still have to tackle the "now go update your bootloader config"
   dilemma.  Should we sed changes into extlinux.conf, syslinux.conf, or
   reconfigure grub?  Sounds dicey.  I suppose printing out a message telling
   the user EXACTLY what to go put in their bootloader config is the best
   compromise.  Or we could *attempt* to find syslinux.conf and sed changes in
   there if found, otherwise tell the user what to change?  Worst case, they
   don't do it, and their system doesn't boot?


* for 0.22

 - Command line configuration for initramsys network interfaces and autostart
   sshd.  We won't have to wory about eth0 name, because systemd won't be
   messing with it.  Although, we have the traditional "which NIC is eth0"
   problems... but 99% of the time it will be eth0.  All of these modes will use
   DHCP, and will imply initramsys to keep your cmd line from getting too
   cluttered: initramsys-net[=VLAN=ID|...]

 - Add a mount_sysimage script to /bin and tell the user about it via /etc/motd.
   (in which case, we'll want the sysroot udev rules after all).
 
 - Add an install_on_zpool script to configure zfs datasets for a sqsh_layer
   system.  Dialog to pick topmost layer.  Crete zpool/root, zpool/sqsh,
   zpool/home, and maybe zpool/scrap.  Install layers into zpool/sqsh.
   
   Configure syslinux.  Configure EFI bootloader.  Hmm... how do we detect the
   need (i.e., because there's no need inside a Xen PVH domain)?  I suppose
   efibootmgr failing would do it...

   Could include a corresponding boot param to automate the bootup into
   installer process.  This should run w/out root disk setup, a la initramsys.
   Could call it initramsys-installer.  Probably actually run as an init script
   inside the initramsys embedded system.

   If we start automatically, there's no time for user to create a zpool... so
   we'll have to ask them to and drop to a shell.  Also, we may have to
   partition a disk to create ESP (and swap?)
