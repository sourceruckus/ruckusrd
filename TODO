-*- mode: outline -*-

* For 1.0.0

 - fix all the FIXMEs

 - documentation (html, man)

 - Maybe revamp command-line usage?

 - Maybe add checksum verification of sqsh_layers to linuxrc?  If anything's
   been modified, make a lot of noise and don't boot.

 - Add --with-system-{busybox,e2fsprogs,eudev,lvm2,mdadm,squashfs-tools}
   configure flags.

 - Pretty sure I broke out-of-tree building at some point... need to fix that.

 - Build something into the build system to fetch submodules when building from
   dist tarball.  Right now, you can really only build the subprojects via a
   git clone.  (This means our dist tarballs are currently useless, as we don't
   yet have --with-system-whatever flags...)


* For 0.x

 - Should prefix all our non-standard kernel commandline options w/
   ruckusrd.whatever.  Once we have config-file support, we should be able to
   keep it a bit less verbose, and this will guard us against accidentally
   using the same option as something in the kernel or systemd.  A couple
   should probably stay unprefixed (e.g., root=, quiet).

 - Once we've got our initrd acting as a kernel-installer (via modinject), we
   could also add code to do the new sqsh_layer prep and have it work as a full
   blown system installer.  Assuming the user has already created an upper
   layer device and specified it as root=whatever, we could automatically do
   the following:

   1. create new /etc/hostname
   2. create new /etc/mailname
   3. sed hostname and domain into /etc/postfix/main.cf
   4. create new /etc/machine-id
   5. remove /var/log/journal/*
   6. create new /etc/fstab
   7. clean out NetworkManager connections (maybe?)
   8. dpkg-reconfigure locale, tzdata, postfix, ...?

   Of course, if we do that... it will really be distro specific.  So far, the
   things that would get tweaked are pretty generic... it might actually work
   in most distros.

   We could even go as far as creating logvol and EXT4 fs to match
   root=whatever if needed.  That would make installation via pre-existing
   squashfs image super duper trivial: 1) boot up off USB stick, pick "Install
   system" option in syslinux menu, either edit the kernel commandline to
   provide root=whatever, hostname, domainname, or add a couple prompts during
   boot.  Done.

   When installing on a blank system, we would also have to setup boot.
   Install syslinux (either for EFI or BIOS), install the kernel files, install
   the squashfs.img locally somewhere, etc.


* For 0.22

 - Consider adding `rescue` to kick-off a dialog-based rootfs recovery of some
   sort?  Or maybe just add a /bin/rescue script to run via `ruckusonly` shell?

 - If we consider using ruckusonly for maint moving forward, can we kill init
   and switchroot to /sysroot still?  Or does the fact that we started init
   really preclude us from continuing to boot into sysroot?

 - Consider adding `ruckusmaint` to create a maint shell using initramfs init
   (like `ruckusonly`) but with the the sysroot assembled and mounted read-only
   at /sysroot.  This gives us more functionality in our maint shell (e.g.,
   multiple ttys to work from), but would no longer continue to boot the
   sysroot on exit.

   Could alternatively add a mount_sysimage script to /bin and tell the user
   about it via /etc/motd.  (in which case, we'll want the sysroot udev rules
   after all).

 - Consider trying some of the future sqsh_layer managenment stuff from
   docs/sqsh_layers.txt from our new ruckussys shell?  All the stuff that's got
   a "hmm, really have to reboot" or "archiving a live read-write filesystem is
   bad" caveat...?  Perhaps add all those proposed commands as initramfs boot
   params?  Or just add commands to initramfs to do the work?

 - Boot parameter to assemble sqsh_layers but then use the overlay as a source
   to install from.  This is probably the simlest installation mechanism.  This
   way we can boot from sqsh_layers for a first boot, but then immediately turn
   the system into a non-sqsh system.  We get the best of both worlds, quick
   cloning of tons of systems but they have zero odd quirks after first boot.

   For long-lasting systems, constantly installing updates, doing regular work,
   etc, eventually results in essentially the entire collection of sqsh_layers
   being replaced in upper with new files.  So keeping the original sqsh_layers
   around and overlaying eventually turns into a bit of a resource (cpu and
   space) waste.


* For 0.21

 - Manpage section detailing all the boot-time parameters.  Should probably
   have a section describing firmware and microcode handling as well.  Some of
   this info might be in docs/* already.  Perhaps additional pages, like
   ruckusrd-squashfs, ruckusrd-firmware, ruckusrd-params to go along with the
   existing help2man generated manpage (with a See Also section added)?

 - Make sure sqsh_layers=es-base.img works with root=ZFS=zroot/dude and maybe
   make sqshlayerdev=ZFS=zroot/sqsh work too?  Or at least document what
   doesn't work and clean up associated FIXMEs.


* For 0.20

 - Can we add microcodenator and firmwarenator to the initramfs?  Assuming we
   can get the full fw.sqsh to boot, that would be a good place to generate a
   small system-specific fw.sqsh file.  The irony... they used to be a part of
   this source tree.  ;-)

 - Make sure regular maint and normal bootup still work now that i've fleshed
   out `ruckusonly`

 - Test booting ruckusonly on my laptop, to make sure things work as well as
   they did when i started.

 - Do we like `nosysroot` more than `ruckusonly`?  Well, we still have root=
   and want to be able to mount and tweak it... maybe `noswitchroot` or
   `noswitch_root` or `no_switch_root`?  `initramsys`?  I think I like
   `initramsys` best so far.
