-*- org -*-

RuckusRD's Squashfs Layering Mechanism (sqsh_layers)

* Overview
As always, default behavior of linuxrc script will be to assemble a traditional
root filesystem and switch over to it.

Until we remove it, the old squashfs behavior (complete w/ autodetecting
presence of squashfs.img at /) will remain.  Will probably wait a rev or so
before removal.

If =sqsh_layers=layer2:layer1= is provided on the kernel command line,
=/layer1.sqsh= will be mounted at =/layer1=, =/layer2.sqsh= at =/layer2=, etc.
These layers will be used as the "lower layers" for an OverlayFS mount.  Note
that OverlayFS stacks lower layers from right to left (i.e., =layer2= is
stacked on top of =layer1=).

The "upper layer" is for read-write functionality.  Unless overriden via other
parameters, =/upper= will be used.

After switching root, this will result in the rootdev being at =/mnt/root-true=
with each read-only squashfs layer being mounted at =/mnt/sqsh_layer-NAME=.
Since the upper layer needs to be writable, the rootdev will be mounted
read-write (unless =ram_layer=, see below).

* Additional parameters
** ram_layer=SIZE
Use RAM for the upper layer.  This will result in tmpfs of the requested SIZE
mounted at =/upper=.  Any valid value for the tmpfs =size== option can be
specified (e.g., 2G, 50%).  Since rootdev will no longer need to be writable,
it will be mounted read-only.

** sqsh_layerdev=DEV
Use DEV as an alternate device for locating the sqsh layers.  DEV will be
mounted read-only.  This is primarily for supporting sharing of a read-only
device between multiple virtual machines which all have their own dedicated
rootdev for the upper layer.

NOTE: This causes us to look at rootdev AND THEN sqsh_layerdev for named
      layers.  This way, we'll be able to have shared base images w/
      host-specific extra layers.  Otherwise, if a host with lots of changes
      decides to create a new layer, it would have to have write access to
      sqsh_layerdev (which it almost definately does not have).

NOTE: This option cannot be used along with =to_ram= because... why would you
      do that?  The point of =to_ram= is allowing for removal of the root
      device after boot.  To use =to_ram= with a separate sqshdev would work in
      theory, as long as we copy layers from the correct path, but how many
      different pieces of removable media are really going to require at
      bootup?  More than 1?  I see no use-case for that.

** sqsh_layerdir=DIR
Use DIR as the relative path to the images provided via =sqsh_layers=.  This is
so that the layers can be located somewhere other than at the root of the
specified device.

** sqshfstype=TYPE
If specified, assume fstype of sqsh_layerdev is TYPE instead of autodetecting.

* Kernel command line examples
** read-write upper on rootdev
root=/dev/sda1 sqsh_layers=extra:server:base

** read-write upper on rootdev but sqsh_layers on alternate read-only device
root=/dev/xvda1 sqsh_layerdev=/dev/xvdb1 sqsh_layers=extra:server:base

** read-only rootdev, RAM upper layer
root=/dev/sda1 sqsh_layers=extra:server:base ram_layer=50%

** unmounted/removable rootdev, RAM upper layer
root=/dev/sda1 sqsh_layers=extra:server:base ram_layer=50% to_ram

* Making changes persistent when using ram_layer
At any point, while running with =ram_layer=, changes can be made persistent by
doing:

: # mksquashfs /mnt/root-true/upper/upper \
:      /mnt/root-true/newlayer.sqsh

and preppending =newlayer:= to =sqsh_layers= on the kernel command line.

NOTE: You'll also have to clean out =/mnt/root-true/upper/upper= w/out hosing
      up the overlayfs mount, though.  Easiest way is actually do the
      =mksquashfs= command from a RuckusRD =maint= shell, then =rm -rf
      /sysroot/upper= and reboot.

How to merge a couple squashfs layers into a single one...?

Say you've got =new3:new2:new1:server:base= and you want to merge all the new
layers together:

combine new1,2,3 with a secondary overlayfs mount, then mksquashfs and modify
kernel params

: # cd /mnt/root-true
: # mkdir supernew
: # mount -t overlayfs -o lowerdir=new3,new2,new1 none supernew
: # mksquashfs supernew supernew.sqsh
: # umount supernew

* Filesystem creation example
** base (using tmpfs as a dumping zone)
mkdir -p merged
mount -t tmpfs none merged

pushd merged
restore -rly -f path/to/base.img
popd

mksquashfs merged base.sqsh

umount merged

mkdir base
mount -o loop base.sqsh base

** server (via overlayfs)
mount -t tmpfs none upper
mkdir -p upper/{upper,work}

mkdir merged
mount -t overlay -o lowerdir=base,upperdir=upper/upper,workdir=upper/work \
    none merged

pushd merged
restore -rly -f path/to/server.img
popd

umount merged

mksquashfs upper/upper server.sqsh

umount upper

mkdir server
mount -o loop server.sqsh server

** extra (via overlayfs)
mount -t tmpfs none upper
mkdir -p upper/{upper,work}

mkdir -p merged
mount -t overlay -o \
    lowerdir=server:base,upperdir=upper/upper,workdir=upper/work \
    none merged

pushd merged
restore -ly path/to/extra.img
popd

umount merged

mksquashfs upper/upper extra.sqsh

umount upper

mkdir extra
mount -o loop extra.sqsh extra

** config (via overlayfs)
mount -t tmpfs none upper
mkdir -p upper/{upper,work}

mkdir -p merged
mount -t overlay -o \
    lowerdir=extra:server:base,upperdir=upper/upper,workdir=upper/work \
    none merged

pushd merged
--- do manager stuff ---
popd

umount merged

mksquashfs upper/upper config.sqsh

umount upper

mkdir config
mount -o loop config.sqsh config

* Possible ruckusrd usage changes and new functionality
** global flags
--verbose
--force
--dry-run
--version

I think I'm going to have a --reboot flag and force it's prescence on any ops
requiring a reboot.  Any ops that don't will issue an error if you specify
--reboot (for just in case we ever work around the need to reboot).

** ruckusrd create
ruckusrd create [--base=DIR] [--kernel=VERSION] IMGNAME

Create an initramfs image.  This is the basic replacement for mkinitrd.  Note
that we are now deviating from the old Fedora-ish 'mkinitrd' usage, so this
will break old scripts.

By default, won't overwrite an existing image file.  Default basedir is /.
Default kernel version is currently running kernel.

NOTE: We could consider changing the overwriting behavior at this point, since
      we won't need to match behavior of 'mkinitrd' any more, since we will
      have already broken command line usage.

NOTE: Also, we should stop installing a 'mkinitrd' symlink at this point.

** ruckusrd sqsh-init
ruckusrd sqsh-init [--force | --dry-run] [--reboot] LAYERNAME ROOTNAME

Creates an initial sqsh_layer from a running system's rootfs named LAYERNAME
and preps ROOTNAME, which will be the upper-layer device specified to the
kernel via root= (supports root=LABEL= and root=UUID=).

FIXME: ROOTNAME filesystem should be created already?  Or we could create it
       for the user and have him specify device name instead...?

NOTE: sqsh_layers= will need to get added to kernel command line.  In order for
      ruckusrd to do that, it would have to know quite a bit about your
      bootloader... which isn't practical.  So the user will have to make
      kernel cmdline changes.

mount --bind / /tmp/sqsh
mksqshfs /tmp/sqsh LAYERNAME.sqsh -noappend

NOTE: That bindmount trick has you archiving a live read-write root filesystem,
      though...  If rootfs is lvm, we could create a snapshot to archive and
      avoid the reboot.  Of course, the user is going to want to reboot and
      start *using* sqsh_layers after this... so it's not like the forced
      reboot is that bad to begin with.

** ruckusrd sqsh-commit
ruckusrd sqsh-commit [--force | --dry-run] [--merge=N] [--reboot] LAYERNAME

Commits upper-layer changes by creating a new sqsh_layer to be added to the
kernel command line.  If desired, this new layer can be merged into the topmost
N lower layers, resulting in a single new sqsh_layer named LAYERNAME.

If not =ram_layer=, upper layer will get cleaned out so we can start fresh.

NOTE: It's up to the user to actually modify the kernel command line arguments
      in their bootloader config file.

FIXME: could make the user commit and then merge in 2 steps... would simplify
       command line parsing here a little.

FIXME: Also, we'd have to purge upper/work w/out borking the overlayfs mount...
       We'll have to figure out what kind of shenanigans are needed to get this
       working w/out a reboot.

mksquashfs /mnt/root-true/upper/upper /mnt/sqshlayer_dev/newone.sqsh
rm -rf /mnt/root-true/upper/{upper,work}
reboot

FIXME: so... i don't think we *can* safely do this w/out rebooting.  1) I'd
       would rally need to get / mounted read-only prior to doing the
       mksquashfs call, which might cause stuff to crash.  2) I would need to
       umount and reassemble the now verry pissed off overlay mount... which is
       your rootfs... so system instability is going to be a problem.

FIXME: Should this actually *remove* the old N topmost layers when merging?

** ruckusrd sqsh-merge
ruckusrd sqsh-merge [--force | --dry-run] N LAYERNAME

Merge the topmost N lower layers into a single sqsh_layer named LAYERNAME.
This can be done periodically to keep things from getting too crazy (i.e.,
because I'm assuming that having a dozen lower layers in an overlayfs is
probably pretty slow).

NOTE: It's up to the user to actually make similar changes to the kernel
      command line in the bootloader config file.

FIXME: This one, we could potentially sqeek by w/out rebooting...  We cannot
       force the overlay to USE the new merged layer, but its contents will
       still be identical to the new layer... So we could just keep right on
       running, except that it might get confusing/misleading.  Actually, we
       can avoid confusion by -o remounting w/ new settings...  They don't
       actually effect anything other than /proc/mounts, but that's really
       enough for this oddball case.

FIXME: Should this actually *remove* the old N topmost layers?

* live overlay changes dreaming

Ok, so I'd love to be able to commit changes on the fly w/out having to
reboot... but I don't think I can.

wait...

mount -o remount,rw /mnt/sqsh_layerdev
cd /mnt/root-true/upper/upper
mksquashfs . /mnt/sqsh_layerdev/blarg.sqsh
mkdir /mnt/sqsh_layer-blarg
mount /mnt/sqsh_layerdev/blarg.sqsh /mnt/sqsh_layer-blarg
mount -o remount,lowerdir=/mnt/sqsh_layer-blarg:/sqsh_layer-denuc-base3:/sqsh_layer-denuc-base2:/sqsh_layer-denuc-base,upperdir=/tmproot/upper/upper.new,workdir=/tmproot/upper/work.new /

it let me do that...  but now did it work or eat itself?!?  looks like neither.
the original upperdir is still getting mods written to it, and the new one is
just an empty dir.  and if i remove a dir from upper, even though it's now in
the topmost lower layer, it's gone from rootfs.  looks like all that did was
change the output of mount and /proc/mounts

i can't really even stage relayering for next reboot, because if I go to do
another commit after queing one up, I won't be able to tell what's new in upper
since the last commit... timestamps maybe?  I ton't think that will work
regarding file removal, though.

Looks like 'ruckusrd commit' will have to force a reboot...  it could either 1)
do what I just described up to the remount, then reboot.  Or 2), somehow inform
the initramfs that it should do more work upon next invocation.  Could use
=/.ruckusrd_commit= or something like that.  Doing option 1) frequently will
eventually leave us w/ awkward filesystem problems I think (since we're
archiving a read-write filesystem).

** sqsh-convert
Tell user to update bootloader config, actually print out what it should be?
Then reboot (i.e. tell the user to reboot).

Perhaps we could force syslinux usage and edit /boot/syslinux/syslinux.cfg for
the user?  That would tie us to syslinux, which I love, but doesn't have super
UEFI support yet/still.

maint # this can't go maint, it'll have to be 'shell'
mount -o remount,rw /dev/root # not needed, because already rw?
mount -o remount,rw /sev/sqsh_layerdev # if needed
mksquashfs /sysroot /path/to_sqsh/$new_layer
rm /sysroot/.ruckusrd_sqsh_convert flag
mount -o remount,ro everything possible
reboot

We'll need sqsh_layer name to get passed in somehow


** sqsh-commit
get everything unmounted
mount /dev/root /tmproot
mount /dev/squash_layerdev /sqsh
mksquashfs /tmproot/upper/upper /sqsh/$new_layer

mount -o remount,rw /dev/sqsh_layerdev
mount -o remount,ro /dev/root
mksquashfs /sysroot/mnt/root-true/upper/upper \
    /sysroot/mnt/sqshlayer_dev/$new_layer
rm -rf /mnt/root-true/upper/{upper,work}
reboot

** sqsh-merge
maint
mount overlay the ones to merg
mksquashfs the overlay
umount
reboot

* replace kernel command line w/ a config file?
Then we don't have to make bootloader changes upong commit or merge calls?  We
will no longer be able to tweak layers at boot time via bootloader menu,
though.

Well, we WILL be able to override via kernel command line, but we'll have to
know what we're overriding and type it all out by hand because it will no
longer already be there to tweak.

* Known Issues:
** multiple lower layers doesn't play well w/ advanced overlay mount options
Specifically index=on, which is required for nfs_export.  I'm unsure if this is
just a wont-ever-work issue, or would work if squashfs supported filesystem
UUID, or if it's bugs in overlayfs... either way, using these options with or
overlay mount eventually leads to the following moutn errors after creating 2
or more lower layers:

overlayfs: null uuid detected in lower fs '/', falling back to index=off,nfs_export=off

And once you've got that, I'm pretty sure you're overlay is pretty much hosed,
since you cannot use index=on and then switch back to index=off w/out wrecking
your filesystem according to the overlayfs docs.

** squashfs doesn't support filesystem UUIDs
I could try and implement this and supply patches to kernel and squashfs-tools.
Fixing it *might* avoid problems w/ multiple lower layers mentioned above.

** squashfs doesn't support POSIX ACLs
Poop... but is it hurting anything?  There have been patches for the kerne and
the squashfs-tools circulating on LKML for years w/out anyone seeming to care
enough to get it merged...  I could test the patches out and make some noise.

FYI, the test-case file I've used in the past is
/var/log/journal/<machine-id>/system.journal, which should have the following
in Ubunut 18.04:

% getfacl /var/log/journal/ee438e41a35bc6e2371ff8505e1a2c9b/system.journal
# file: var/log/journal/ee438e41a35bc6e2371ff8505e1a2c9b/system.journal
# owner: root
# group: systemd-journal
user::rw-
group::r-x			#effective:r--
group:adm:r-x			#effective:r--
mask::r--
other::---

% getfattr /var/log/journal/ee438e41a35bc6e2371ff8505e1a2c9b/system.journal
# file: var/log/journal/ee438e41a35bc6e2371ff8505e1a2c9b/system.journal
user.crtime_usec

% lsattr /var/log/journal/ee438e41a35bc6e2371ff8505e1a2c9b/system.journal
--------------e--- /var/log/journal/ee438e41a35bc6e2371ff8505e1a2c9b/system.journal

** dpkg backup files go wonky?
This has happened a couple times now w/ multiple lower layers and REDIRECT on.
It looks like dpkg makes a hardlink or renames to a backup file, causing both
files to copy_up, then overwrites the original file, leaving the upper link a
bit wonky.  Each time it's happened it's been with a backup file that was safe
to remove, so I booted to maint, unmounted everything, just mounted the upper
and removed the backup file.

Not sure how to really fix this... and it's strange that I never ran into it
while working in centos.  Well, I guess most of my work with centos had all the
rpm work done prior to lowest layer creation, because I had no internet.  All
upper-lower layers were software being installed by hand or via srp.

Rpm might also not be doing the exactly Same dance for "secure file removal"
that dpkg does... at least on some packages, but definately not on all.

UPDATE: I think this was due to my overlay being borked up by the multiple
        lower layers w/ index=on mentioned above.  Keep your eye open for this
        now that I'm not using index=on anymore.

** broken symlinks make syslog noise?
Not sure if it's all broken symlinks or something a did in this case...  but
systemctl disable --now apache2 results in broken symlinks in /etc/rc2.d and
/etc/rc3.d and a lot of noise if you do an ls in those dirs

Recreating the symlinks directly in the upper dir (while mounted) seems to fix
the problem... which is very strange indeed.

Odd... when I tried to recreate this by doing a systemctl disable --now
dnsmasq, the symlinks all looked fine...

** can't sqsh commit from domU w/out poking from the dom0
Not sure how this behaves bare metal, but when I try to create new sqsh_layers
from the maint shell, there doesn't seem to be a good way to reboot afterwards.
The reboot and shutdown commands do nothing, and I can either intentionally
cause kernel panic by umounting things and exiting or let the system boot up
into an awkward/trashed upper layer... which will probably panic.  Once panic
happens, I need to destroy and recreate the domU.

I guess if I build the sqsh commit stuff right into linuxrc I could ensure that
the NEW set of lower/upper layers gets reassembled after running mksquashfs and
then boot it up w/out a panic...  but doing things by hand is a bit of a pain.

So, even if I DO reassemble and boot up nicely, I haven't changed any
bootloader xen config.  In other words, next reboot will be all hosed up unless
the user goes and fixes the bootloader/xen config.  Soo... probably better if I
don't automatically reassemble.  If there's manual intervention required, we
should hit the user in the head w/ it to make sure it doesn't get forgotten.

Can I compare /.sqsh_config to /proc/cmdline and fix if needed?  And don't
remove /.sqsh_config unless the 2 match?  But what if they don't match because
the user modified boot params via bootload menu?

If I migrate to a config-file based setup, but allow for overriding via command
line, then we can let command line trump config-file always.  And we can use a
DIFFERENT file to tell linuxrc to do reconstruction operations (e.g., sqsh
commit).  Although... where would the config file go?  Would have to be on
root-true.  And linuxrc commands could be in the rootfs at /.sqsh_config or
something like that.

*** xen
From the dom0, I can do a 'xl config-update guest ./guest.cfg' after tweaking
the config file.  But is there a way to edit that from within the virtual
machine?  That sure would be nice... but I don't think such a mechanism exists.

Even if we stored the .cfg file on the domU filesystem somewhere, there's no
mechanism to reparse it from within the domU, so a reboot will use the old
config until dom0 updates it.

UPDATE: What if we do a poweroff from the domU and have some service in the
        dom0 configured to notice and re-create it?  Can we get xen-watchdog to
        do this for us?  Or does that only notice lockups...?

*** bare-metal
The user needs to update whatever bootloader they are using... We cannot make
any assumptions there, really.  Even if I did add bootloader-specific update
code, it would be a messy ton of work with tons of pitfalls... and it's not
hard to manually do.

UPDATE: If we put all the sqsh_layer stuff in a config file, we CAN update it
        for the user automatically.  But if we're planning on that, we have to
        make it very obvious that users should NOT have sqsh_layer command line
        options in their bootloader config and that they should ONLY be
        specified there for testing purposes.
